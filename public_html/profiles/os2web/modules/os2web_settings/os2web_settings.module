<?php

/**
 * @file
 * Code for the OS2Web indstillinger feature.
 */

include_once('os2web_settings.features.inc');

/**
 * Os2web_settings_permission.
 */
function os2web_settings_permission() {
  return array(
    'administer os2web' => array(
      'title' => t('Administer OS2Web'),
      'description' => t('Access settings and administration pages for OS2Web')
    ),
  );
}

/**
 * Implements hook_menu().
 */
function os2web_settings_menu() {
  $items['admin/config/os2web'] = array(
    'title' => 'OS2Web Setup',
    'description' => 'Set up OS2 cms services',
    'position' => 'right',
    'weight' => -15,
    'access arguments' => array('administer os2web'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/os2web/settings'] = array(
    'title' => 'OS2web Settings',
    'description' => 'General settings for the OS2Web project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2web_settings_settings_form'),
    'access arguments' => array('administer os2web'),
    'type' => MENU_NORMAL_ITEM | MENU_DEFAULT_LOCAL_TASK,
    'file' => 'os2web_settings.admin.inc',
  );
//  $items['admin/config/os2web/import'] = array(
//      'title' => 'OS2web Imports',
//      'description' => t('Fire all initial imports.'),
//      'page callback' => 'drupal_get_form',
//      'page arguments' => array('os2web_settings_import_form'),
//      'access arguments' => array('administer os2web'),
//      'type' => MENU_LOCAL_TASK,
//  );
  $items['node/%/dump'] = array(
    'title' => 'Node dump',
    'page callback' => 'os2web_settings_nodedump',
    'page arguments' => array(1),
    'access arguments' => array('administer os2web'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_import_form_submit().
 */
function os2web_settings_import_form_submit($form, $form_state) {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
}

/**
 * Implements hook_import_form().
 */
function os2web_settings_import_form($form, $form_state) {
  $form['start'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );
  return $form;
}

/**
 * Loads a node and dumps it.
 */
function os2web_settings_nodedump($nid) {
  $node = node_load($nid);
  $html = '<textarea rows="100">' . print_r($node, 1) . '</textarea>';
  return $html;
}

/**
 * Implements hook_start_form_submit().
 */
function os2web_settings_start_form_submit(&$form, &$form_state) {
  $fields = db_select('field_config', 'fc')->fields('fc', array('field_name'))->execute()->fetchCol();
  $batch = array(
    'operations' => array(array('os2web_settings_langfix_disable_translation', array())),
    'finished' => 'os2web_settings_langfix_finished',
  );
  foreach ($fields as $field) {
    // $batch['operations'][] = array('os2web_settings_langfix_process', array('revision', $field));

    $batch['operations'][] = array('os2web_settings_langfix_process',
      array('data', $field),
    );
  }
  batch_set($batch);
}

/**
 * Deprecated function to fix node translations.
 */
function os2web_settings_langfix_finished($success, $results, $operations) {
  error_log("Var: \$results = " . print_r($results, 1));
}

/**
 * Deprecated function to fix node translations.
 */
function os2web_settings_langfix_disable_translation(&$context) {
  db_query('UPDATE {field_config} SET translatable = 0');
  $context['finished'] = 1;
}

/**
 * Deprecated function to fix node translation.
 */
function os2web_settings_langfix_process($type, $field, &$context) {
  // Local init.
  $table = 'field_data_' . $field;
  $revtable = 'field_revision_' . $field;

  // Find dubes
  // Update language for all non-dupes
  $rows = db_query('SELECT entity_id,count(language) as c FROM {' . $table . '} GROUP BY entity_id, delta HAVING c > 1 ORDER BY c DESC');
  $dupes = $rows->fetchCol();

  $context['result']['dupes'] = array_merge($context['result'], $dupes);

  $ids = db_select($table, 'f')
      ->fields('f')
      ->condition('language', 'da');
  if (count($dupes) > 0) {
    $ids = $ids->condition('entity_id', $dupes, 'NOT IN');
  }
  $ids = $ids->execute();
  while ($row = $ids->fetchObject()) {
    db_update($table)
        ->fields(array('language' => 'und'))
        ->condition('entity_id', $row->entity_id)
        ->condition('revision_id', $row->revision_id)
        ->condition('delta', $row->delta)
        ->execute();

    $revcount = db_select($revtable, 'r')
            ->fields('r')
            ->condition('entity_id', $row->entity_id)
            ->condition('revision_id', $row->revision_id)
            ->condition('delta', $row->delta)
            ->execute()->rowCount();

    if ($revcount > 1) {
      error_log('possible dupe found in revision table.');
    }
    else {
      db_update($revtable)
          ->fields(array('language' => 'und'))
          ->condition('entity_id', $row->entity_id)
          ->condition('revision_id', $row->revision_id)
          ->condition('delta', $row->delta)
          ->execute();
    }
  }

  $context['message'] = t('Processing %field', array(
    '%field' => $field,
    '%nid' => $context['sandbox']['progress'] + 1,
    '%total' => $context['sandbox']['max'],
  ));

  $context['finished'] = 1;
}

/**
 * Sends a mail to the techy webmaster of OS2web.
 *
 * @param string $message
 *   The message to send.
 *
 * @param int $minimum_time_between
 *   The minimum time between each email is sent. If an email with same message
 *   has been sent in that time, it will be ignored. Default is zero. Send every
 *   time.
 *
 * @return bool
 *   True on success
 */
function _os2web_settings_send_error_email($message, $minimum_time_between = 0) {
  // Only send if an email is stored.
  if ($mail_to = variable_get('os2web_settings_techmaster_email')) {

    // Dont spam too much. Only send the error every half hour.
    $last_notified = variable_get('os2web_settings_webmaster_last_notif_time_' . md5($message), 0);
    if ($minimum_time_between > 0 && $last_notified < strtotime('-' . (int) $minimum_time_between . ' min')) {
      // Set up the mail body.
      $mail_body = t('You have recieved a notice from !site_name:', array('!site_name' => variable_get('site_name'))) . "\n";
      $mail_body .= $message . "\n";

      $from = variable_get('site_mail', '');
      $my_module = 'os2web_settings';
      $my_mail_token = 'error_email';
      $email = array(
        'id' => $my_module . '_' . $my_mail_token,
        'to' => $mail_to,
        'subject' => t('OS2web - Status email from !site_name', array('!site_name' => variable_get('site_name'))),
        'body' => format_string($mail_body, array('!message' => check_plain($message))),
        'headers' => array(
          'From' => $from,
          'Sender' => $from,
          'Return-Path' => $from,
        ),
      );
      // Send mail.
      $mail_system = drupal_mail_system($my_module, $my_mail_token);
      variable_set('os2web_settings_webmaster_last_notif_time_' . md5($message), time());
      return $mail_system->mail($email);
    }
  }
}
