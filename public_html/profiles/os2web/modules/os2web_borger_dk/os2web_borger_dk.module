<?php

/**
 * @file
 * Code for the OS2web - Borger.dk feature.
 */

include_once 'os2web_borger_dk.features.inc';
/**
 * Text formats
 */
define('BORGERDK_TEXT_FORMAT_PLAIN', variable_get('os2web_borger_dk_articles_text_format_plain', 'plain_text'));
define('BORGERDK_TEXT_FORMAT_HTML', variable_get('os2web_borger_dk_articles_text_format_html', 'full_html'));

/**
 * Implements hook_menu().
 */
function os2web_borger_dk_menu() {
  $items = array();
  $items['admin/config/os2web_borger_dk'] = array(
    'title' => 'OS2web borger.dk settings',
    'description' => 'General settings for Borger.dk articles, fx, modify fields display, editable and syncronization time',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer os2web borgerdk article settings'),
  );

  $items['admin/config/os2web_borger_dk/settings'] = array(
    'title' => 'OS2web Borger.dk Settings',
    'description' => 'General settings for the OS2Web borger.dk',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2web_borger_dk_settings_form'),
    'access arguments' => array('administer os2web borgerdk article settings'),
    'file' => 'os2web_borger_dk.admin.inc',
  );

  $items['import/os2web_borger_dk/autocomplete'] = array(
    'page callback' => '_os2web_borger_dk_autocomplete_callback',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_permission().
 */
function os2web_borger_dk_permission() {
  return array(
    'administer os2web borgerdk article settings' => array(
      'title' => t('Administer OS2Web Borger.dk article settings'),
      'description' => t('Administer settings for the OS2Web Borger.dk article import module.'),
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function os2web_borger_dk_action_info() {
  return array(
    'os2web_borger_dk_articles_update_action' => array(
      'type' => 'node',
      'label' => t('Update article from borger.dk'),
      'configurable' => FALSE,
    ),
  );
}

/**
 * Function _os2web_borger_dk_autocomplete_callback().
 */
function _os2web_borger_dk_autocomplete_callback($string = '') {
  $matches = array();

  if ($string) {

    $query = db_select('os2web_borger_dk_article_titles', 'o')
      ->fields('o', array('ArticleID', 'ArticleStatus', 'ArticleTitle'))
      ->condition('o.ArticleStatus', 0, '>=')
      ->condition('o.ArticleTitle', db_like($string) . '%', 'LIKE')
      ->range(0, 10);
    $result = $query->execute();

    // Add matches to $matches.
    foreach ($result as $row) {
      if ($row->ArticleStatus > 0) {
        $row_name = $row->ArticleTitle . ' [*](ID:' . $row->ArticleID . ')';
      }
      else {
        $row_name = $row->ArticleTitle . ' (ID:' . $row->ArticleID . ')';
      }
      $matches[$row_name] = check_plain($row_name);
    }
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_form_alter().
 */
function os2web_borger_dk_form_alter(&$form, &$form_state, $form_id) {
  static $os2web_borger_dk_falter_form;
  if (isset($form['type']) && isset($form['#node'])) {
    if ($form_id == 'os2web_borger_dk_article_node_form') {
      if (isset($os2web_borger_dk_falter_form) && !empty($os2web_borger_dk_falter_form)) {
        // If the static form-cache has already been build then
        // we simply return the form-cache value instead of
        // building the whole form twice per request.
        $form = $os2web_borger_dk_falter_form;
      }
      else {
        $node = $form_state['node'];
        $titles_autocomplete = variable_get('os2web_borger_dk_titles_sync', FALSE);
        if (!isset($node->nid) || isset($node->is_new)) {
          os2web_borger_dk_autocomplete_form($form, $form_state);
        }

        $locked_os2web_types = array(
          'field_os2web_borger_dk_borgerurl' => 1,
          'field_os2web_borger_dk_kle' => 2,
          'field_os2web_borger_dk_formterm' => 2,
        );
        $admin_display_fields = variable_get('os2web_borger_dk_display');

        $data = field_info_instances('node', 'os2web_borger_dk_article');
        // First we create a list of all field-names and labels.
        $checkbox_opts = array();
        $initial_values = array();

        $data['title'] = array('label' => 'Title');
        $visible_items = (isset($form['#node']->os2web_borger_dk_article['field_settings'])) ? $form['#node']->os2web_borger_dk_article['field_settings'] : NULL;
        $admin_last_settings = variable_get('os2web_borger_dk_admin_last_settings');

        foreach ($data as $type => $item) {
          if ((isset($locked_os2web_types[$type]) && $locked_os2web_types[$type] != 2)
          ||!isset($locked_os2web_types[$type])) {
            // Then we insert field label to our checkboxes options.
            $checkbox_opts[$type] = $item['label'];
            // admin-config says we should show this item as an option.
            if (isset($admin_display_fields[$type])) {
              if (empty($visible_items) || (!empty($visible_items) && !empty($visible_items[$type]))) {
                // If visible_items is empty that means we should use
                // admin-config or if the type of visible_items is set,
                // and set to be displayed then we add this type
                // to the default_values.
                $initial_values[] = $type;
              }
              else {
                if ($admin_last_settings[$type] != $admin_display_fields[$type]
                    && $visible_items[$type] == $admin_last_settings[$type]) {
                  $initial_values[] = $type;
                }
                else {
                  if ($admin_last_settings[$type] != $admin_display_fields[$type]
                      && $visible_items[$type] == $admin_last_settings[$type]) {
                    $initial_values[] = $type;
                  }
                }
              }
            }
          }
        }
        variable_set('os2web_borger_dk_admin_last_settings', $admin_display_fields);

        // This is the field fieldset.
        $form['fields_visible_formset'] = array(
          '#type' => 'fieldset',
          '#title' => t('Toggle display'),
          '#collapsible' => TRUE,
          '#description' => t('Set the visibility of article fields.'),
          '#group' => 'additional_settings',
        );
        $form['fields_visible_formset']['os2web_borger_dk_field_settings'] = array(
          '#type' => 'checkboxes',
          '#options' => $checkbox_opts,
          '#description' => t("Check or uncheck the respective fields"),
          '#default_value' => $initial_values,
          '#after_build' => array('os2web_borger_dk_process_checkboxes_os2web_borger_dk_article'),
          '#group' => 'additional_settings',
        );

        if (isset($form['#node']->nid)) {
          $form['actions']['os2web_borger_dk_synchronize'] = array(
            '#type' => 'submit',
            '#value' => t("Update article now"),
            '#weight' => 100,
            '#access' => variable_get('node_preview_' . $node->type, DRUPAL_OPTIONAL) != DRUPAL_REQUIRED || (!form_get_errors() && isset($form_state['node_preview'])),
            '#submit' => array('os2web_borger_dk_sync_submit'),
          );
        }
        $form['#after_build'][] = 'os2web_borger_dk_after_build';

        // Micro articles.
        if (isset($form['#node']->nid)) {
          $microarticle = variable_get('os2web_borger_dk_microarticle_active');
          $value_editable = variable_get('os2web_borger_dk_editable', array(NULL));
          // If microarticle is set up to show.
          if ($microarticle) {
            $field_microarticle_settings = (isset($form['#node']->os2web_borger_dk_microarticle['field_microarticle_settings'])) ? $form['#node']->os2web_borger_dk_microarticle['field_microarticle_settings'] : NULL;
            $body_text = (isset($form['body']['und']['0']['#entity']->body['und']['0']['value'])) ? $form['body']['und']['0']['#entity']->body['und']['0']['value'] : '';

            hide($form['body']);
            $doc = new DOMDocument();
            $doc->loadHTML('<?xml encoding="utf-8" ?>' . $body_text);
            $xpath = new DOMXPath($doc);

            $results = $xpath->query("//*[@class='microArticle']");

            $microno = 0;
            foreach ($results as $item) {
              foreach ($item->getElementsByTagName('h2') as $articletitle) {
                $title = trim($articletitle->nodeValue);
              }

              $text = '';
              foreach ($item->getElementsByTagName('div')->item(0)->childNodes as $articletext) {
                $text .= str_replace('&#13;', '', $doc->saveXML($articletext, LIBXML_NOEMPTYTAG));
              }

              $microno++;
              $checkboxno = 'os2web_borger_dk_micro_' . $microno;
              $h2_text_field = 'os2web_borger_dk_micro_h2_' . $microno;
              $text_area = 'os2web_borger_dk_micro_textarea_' . $microno;

              if ($microno >= 10) {
                $weight = '6.' . ($microno - 10);
              }
              else {
                $weight = '5.' . $microno;
              }
              // For each microarticle we build a fieldset, a textfield for
              // title, a textarea for div content and a checkbox for
              // visibility option.
              $form['os2web_borger_dk_micro_settings_' . $microno] = array(
                '#type' => 'fieldset',
                '#weight' => $weight,
              );

              $form['os2web_borger_dk_micro_settings_' . $microno][$h2_text_field] = array(
                '#type' => 'textfield',
                '#title' => t('Title of Microarticle') . ' ' . $microno,
                '#default_value' => variable_get($h2_text_field, $title),
              );
              // If body (article text) visible/editable option is checked
              // by ADMIN and EDITOR, then forms disabled is false.
              if ($visible_items['body'] === "body" && $admin_display_fields['body'] === "body" && $value_editable['body'] === "body") {
                $form['os2web_borger_dk_micro_settings_' . $microno][$text_area] = array(
                  // '#title' => t('Microarticle ' . $microno),
                  '#type' => 'textarea',
                  '#default_value' => trim($text),
                );

                $form['os2web_borger_dk_micro_settings_' . $microno][$checkboxno] = array(
                  '#type' => 'checkbox',
                  '#title' => t('Visible'),
                  '#description' => t("Check to display this microarticle"),
                  '#default_value' => isset($field_microarticle_settings[$microno]) ? $field_microarticle_settings[$microno] : 1,
                );
              }
              // If body (article text) display option is UNCHECKED
              // by ADMIN or EDITOR, then forms disabled is TRUE.
              else {
                $form['os2web_borger_dk_micro_settings_' . $microno][$text_area] = array(
                  '#title' => t('Microarticle') . ' ' . $microno,
                  '#type' => 'textarea',
                  '#disabled' => TRUE,
                  '#default_value' => trim($text),
                  '#description' => t("Please check 'Article text' visible option below in 'Toggle display', or in OS2web borger.dk Settings (Toggle display/Editable article fields) to show/edit this microarticle."),
                );
                // If this microarticle is NOT editable.
                if ($value_editable['body'] !== "body") {
                  $form['os2web_borger_dk_micro_settings_' . $microno][$checkboxno] = array(
                    '#type' => 'checkbox',
                    '#title' => t('Microarticle Visibility'),
                    '#description' => t("Check to display this microarticle"),
                    '#default_value' => isset($field_microarticle_settings[$microno]) ? $field_microarticle_settings[$microno] : 1,
                  );
                }
                else {
                  $form['os2web_borger_dk_micro_settings_' . $microno][$checkboxno] = array(
                    '#type' => 'checkbox',
                    '#title' => t('Microarticle Visibility'),
                    '#disabled' => TRUE,
                    '#description' => t("Check to display this microarticle"),
                    '#default_value' => isset($field_microarticle_settings[$microno]) ? $field_microarticle_settings[$microno] : 1,
                  );
                }
              }
            }
          }
        }

        if (isset($form['#node']->nid) && ($microarticle)) {
          $form['actions']['os2web_borger_dk_microarticles_update'] = array(
            '#type' => 'submit',
            '#value' => t("Update microarticle content"),
            '#weight' => 101,
            '#access' => variable_get('node_preview_' . $node->type, DRUPAL_OPTIONAL) != DRUPAL_REQUIRED || (!form_get_errors() && isset($form_state['node_preview'])),
            '#submit' => array('os2web_borger_dk_microarticles_update_submit'),
          );
        }
        // End of microarticles.
        // Before we exit this function we set the static form-cache value
        // so that later calls to this function handling the same request
        // can return much faster (instead of building the same form twice).
        $os2web_borger_dk_falter_form = $form;

      }
    }
  }
}

/**
 * Function os2web_borger_dk_autocomplete_form().
 */
function os2web_borger_dk_autocomplete_form(&$form, $form_state) {
  $titles_autocomplete = variable_get('os2web_borger_dk_titles_sync', FALSE);
  $title_search_state = (isset($form_state['values']['os2web_borger_dk_article_search_method'])) ? TRUE : FALSE;
  $url_search = !$title_search_state;

  $form['os2web_borger_dk_article_import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import Borger.dk Article'),
    '#collapsible' => FALSE,
  );

  $form['os2web_borger_dk_article_import']['os2web_borger_dk_article_url_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Borger.dk Article URL'),
    '#default_value' => (isset($form_state['values']['os2web_borger_dk_article_url_text'])) ? $form_state['values']['os2web_borger_dk_article_url_text'] : '',
    '#size' => 60,
    '#maxlength' => 255,
  );

  if ($titles_autocomplete) {
    $form['os2web_borger_dk_article_import']['os2web_borger_dk_article_title_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Borger.dk Article title'),
      '#default_value' => (isset($form_state['values']['os2web_borger_dk_article_title_text'])) ? $form_state['values']['os2web_borger_dk_article_title_text'] : '',
      '#autocomplete_path' => 'import/os2web_borger_dk/autocomplete',
      '#size' => 60,
      '#maxlength' => 255,
      '#attributes' => array('class' => array('auto_submit')),
    );

    $form['os2web_borger_dk_article_import']['os2web_borger_dk_article_title_search'] = array(
      '#type' => 'checkbox',
      '#title' => t('Search for Borger.dk Article by Title-search'),
      '#description' => t('If checked Borger.dk articles are found by title (by URL if un-checked).'),
      '#default_value' => ($url_search) ? 1 : 0,
      '#after_build' => array('_os2web_borger_dk_autocomplete_form_load_js'),
    );
  }
}

/**
 * Function _os2web_borger_dk_autocomplete_form_load_js().
 */
function _os2web_borger_dk_autocomplete_form_load_js($element) {
  $autosubmit_js = '
    $(document).ready(function(){
      Drupal.jsAC.prototype.select = function (node) {
        this.input.value = $(node).data("autocompleteValue");
        if(jQuery(this.input).hasClass("auto_submit")){
          this.input.form.submit();
        }
      };
    });';
  $must_auto_submit = variable_get('os2web_borger_dk_titles_search_auto_submit', FALSE);
  if (!$must_auto_submit) {
    $autosubmit_js = '';
  }
  $js = '(function ($) {
    Drupal.behaviors.switchfield = {
      attach: function(context, settings) {
        var checked1 = $("#edit-os2web-borger-dk-article-title-search").attr("checked");
        if (checked1) {
          $(".form-item-os2web-borger-dk-article-url-text").hide();
          $(".form-item-os2web-borger-dk-article-title-text").show();
        }
        else {
          $(".form-item-os2web-borger-dk-article-url-text").show();
          $(".form-item-os2web-borger-dk-article-title-text").hide();
        }

        $("#edit-os2web-borger-dk-article-title-search").click(function() {
          var checked = $(this).attr("checked");
          if (checked) {
            $(".form-item-os2web-borger-dk-article-url-text").hide(500);
            $(".form-item-os2web-borger-dk-article-title-text").show(500);
          }
          else {
            $(".form-item-os2web-borger-dk-article-url-text").show(500);
            $(".form-item-os2web-borger-dk-article-title-text").hide(500);
          }
        });' . $autosubmit_js . '
      }
    }
  })(jQuery);';
  drupal_add_js($js, 'inline');

  return $element;
}

/**
 * Function os2web_borger_dk_after_build().
 */
function os2web_borger_dk_after_build($form, &$form_state) {
  // Some of the fields are handled exclusively by OS2web.
  // These fields are required on node-add, and can NOT be
  // changed later on (ie. locked).
  $locked_os2web_types = array(
    'field_os2web_borger_dk_borgerurl' => 1,
    'field_os2web_borger_dk_kle' => 2,
    'field_os2web_borger_dk_formterm' => 2,
  );
  $nid = $form_state['values']['nid'];
  $admin_display_fields = variable_get('os2web_borger_dk_display', array(NULL));
  $microarticle = variable_get('os2web_borger_dk_microarticle_active');

  // First we check if this is a node/add-type by checking the node->nid.
  if (!empty($nid)) {
    // This is an old node that is being edited.
    // We must unset all form-elements that has been
    // marked as hidden in the admin-display-settings.
    foreach ($admin_display_fields as $type => $item) {
      if (empty($item) && empty($locked_os2web_types[$type])) {
        if (!$microarticle) {
          os2web_borger_dk_fix_disabled($form[$type]);
        }
      }
    }
    // Then we must disable all fields that has been marked as
    // non-editable in the admin-editable-settings.
    $value_editable = variable_get('os2web_borger_dk_editable', array(NULL));
    foreach ($value_editable as $type => $editable) {
      if ((empty($editable) || !empty($locked_os2web_types[$type])) && !empty($form[$type])) {
        if (!$microarticle) {
          os2web_borger_dk_fix_disabled($form[$type]);
        }
      }
      if ($type == 'field_os2web_byline' && !empty($form[$type])) {
        $form[$type]['#format'] = BORGERDK_TEXT_FORMAT_PLAIN;
      }
    }

    // Finally we lock the special types.
    foreach ($locked_os2web_types as $type => $locked) {
      // If locked = 1 then disable the field.
      if (isset($form[$type]) && $locked == 1) {
        $form[$type]['#required'] = FALSE;
        $form[$type]['und']['#required'] = FALSE;
        $form[$type]['und'][0]['#required'] = FALSE;
        $form[$type]['und'][0]['value']['#required'] = FALSE;
        os2web_borger_dk_fix_disabled($form[$type]);
      }
    }
  }
  else {
    // This is a brand new node-add form, and we must hide every
    // form-field.
    $data = field_info_instances('node', 'os2web_borger_dk_article');
    foreach ($data as $type => $item) {
      // Some fields must be checked before unsetting or php will
      // die because a string for instance can not be unset.
      if (!isset($locked_os2web_types[$type]) || $locked_os2web_types[$type] == 1) {
        // These fields can safely be unset (so they are hidden).
        hide($form[$type]);
      }
      if (isset($locked_os2web_types[$type]) && $locked_os2web_types[$type] == 2) {

        hide($form[$type]['und']);
      }
    }
    $form['field_os2web_borger_dk_borgerurl']['#required'] = FALSE;
    $form['field_os2web_borger_dk_borgerurl']['und']['#required'] = FALSE;
    $form['field_os2web_borger_dk_borgerurl']['und'][0]['#required'] = FALSE;
    $form['field_os2web_borger_dk_borgerurl']['und'][0]['value']['#required'] = FALSE;
    $form['title']['#required'] = FALSE;
    $form['title']['#access'] = FALSE;

    if (isset($form['path']['pathauto']['#default_value'])) {
      $form['path']['pathauto']['#checked'] = FALSE;
    }
    $form['status'] = 0;
    $form['promote'] = 0;
  }

  return $form;
}

/**
 * Function os2web_borger_dk_process_checkboxes_os2web_borger_dk_article().
 */
function os2web_borger_dk_process_checkboxes_os2web_borger_dk_article(&$element) {

  $admin_display_fields = variable_get('os2web_borger_dk_display', array(NULL));
  if (!empty($element)) {
    foreach (element_children($element) as $key) {
      if (!isset($admin_display_fields[$key]) || $admin_display_fields[$key] == '0') {
        $element[$key]['#attributes'] = array('disabled' => 'disabled');
        $element[$key]['#description'] = t('Please go to OS2web Borger.dk settings to change the visibility for this field');
      }
    }
  }
  return $element;
}

/**
 * Function os2web_borger_dk_fix_disabled().
 */
function os2web_borger_dk_fix_disabled(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      // Recurse through all child elements.
      os2web_borger_dk_fix_disabled($elements[$key]);
    }
  }
  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}

/**
 * Implements hook_node_load().
 */
function os2web_borger_dk_node_load($nodes, $types) {
  // Decide whether any of $types are relevant to our purpose.
  // We only work on the "os2web_borger_dk_article" node-types.
  if (in_array('os2web_borger_dk_article', $types)) {
    // Gather our extra data for each of these nodes.
    $result = db_query('SELECT nid, external_id, external_status, external_url, field_settings, field_microarticle_settings, published_date, last_updated FROM {os2web_borger_dk_article} WHERE nid IN (:nids)', array(
      ':nids' => array_keys($nodes)));
    // Get admin microarticles settings.
    $microarticle = variable_get('os2web_borger_dk_microarticle_active', FALSE);
    // Add our extra data to the node objects.
    foreach ($result as $record) {
      $field_settings = unserialize($record->field_settings);
      $nodes[$record->nid]->os2web_borger_dk_article = array(
        'external_id' => $record->external_id,
        'external_status' => $record->external_status,
        'external_url' => $record->external_url,
        'field_settings' => $field_settings,
        'published_date' => $record->published_date,
        'last_updated' => $record->last_updated,
      );
      // If microarticle option is set to display.
      if ($microarticle) {
        $field_microaritcle_settings = unserialize($record->field_microarticle_settings);
        $nodes[$record->nid]->os2web_borger_dk_microarticle = array(
          'field_microarticle_settings' => $field_microaritcle_settings,
        );
      }
      // If microarticle option is NOT set to display,then we set an empty array
      // to node->os2web_borger_dk_microarticle[''field_microarticle_settings].
      else {
        $nodes[$record->nid]->os2web_borger_dk_microarticle = array(
          'field_microarticle_settings' => '',
        );
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Apparently the only way to let drupal search modules for themes.
 * Resource:
 *   http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 */
function os2web_borger_dk_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'mymodule');
  // Munge on a copy.
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _os2web_borger_dk_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter).
 */
function _os2web_borger_dk_insert_after_first_element(&$a, $element) {
  if (is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Implements hook_node_view().
 */
function os2web_borger_dk_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'os2web_borger_dk_article') {
    $fields = $node->os2web_borger_dk_article['field_settings'];
    // First get admin display settings.
    $admin_display_fields = variable_get('os2web_borger_dk_display');
    $locked_os2web_types = array('field_os2web_borger_dk_borgerurl' => 1);
    // We get admin microarticle display settings.
    $microarticle = variable_get('os2web_borger_dk_microarticle_active', FALSE);
    if ($microarticle) {
      $field_microarticle_settings = $node->os2web_borger_dk_microarticle['field_microarticle_settings'];
    }

    foreach ($admin_display_fields as $type => $value) {
      // If ADMIN set this field to display.
      if ($admin_display_fields[$type]) {
        // Microarticles : if microarticle is set up to show by admin.
        if ($microarticle) {
          $content_field = (isset($node->content[$type]['#field_name'])) ? $node->content[$type]['#field_name'] : '';
          // Check if content field is body and field_microarticle_settings
          // is NOT empty.
          // The field_microarticle_setting will be empty when a new
          // article is imported and shown in a form, then node_view
          // will display full body text.
          if ($content_field == 'body' && !empty($field_microarticle_settings)) {
            $body_text = $node->body['und']['0']['value'];

            $article_text = '';

            $doc = new DOMDocument();
            $doc->loadHTML('<?xml encoding="utf-8" ?>' . $body_text);
            $xpath = new DOMXPath($doc);

            $results = $xpath->query("//*[@class='microArticle']");

            $microno = 0;
            foreach ($results as $item) {
              foreach ($item->getElementsByTagName('h2') as $articletitle) {
                $title = trim($articletitle->nodeValue);
              }

              $text = '';
              foreach ($item->getElementsByTagName('div')->item(0)->childNodes as $articletext) {
                $text .= $doc->saveHTML($articletext);
              }
              $microno++;

              if ($field_microarticle_settings[$microno] != 0) {
                // Body text (Article text).
                $article_text .= "<div class=\"microArticle\" id=\"microArticle" . $micro_id . "\">" . "\r\n";

                $micro_h2 = "<h2 class=\"mArticle\" id=\"mArticle" . $microno . "\">";
                $micro_h2 .= $title . "</h2>";

                $micro_content = "<div class=\"mArticle" . $microno . " mArticle\">";
                $micro_content .= $text . "\r\n    </div>";

                $article_text .= $micro_h2 . "\r\n";
                $article_text .= $micro_content;
                $article_text .= "\r\n</div>\r\n\r\n";
              }
            }
            // Content body shows only visible microarticles/ part of body_text.
            $node->content[$type]['0']['#markup'] = $article_text;
          }
        }
        elseif ($type == 'body') {
          $node->content['body']['0']['#markup'] = $node->body['und']['0']['value'];
        }

        // End of microarticles.
        // If EDITOR set this field to be hidden.
        if ($fields[$type] == '0') {
          $content_field = (isset($node->content[$type]['#field_name'])) ? $node->content[$type]['#field_name'] : '';
          if ($content_field == $type) {
            $node->content[$type]['0']['#markup'] = '';
          }
        }
      }

      // If ADMIN set this field to be hidden.
      else {
        $content_field = (isset($node->content[$type]['#field_name'])) ? $node->content[$type]['#field_name'] : '';
        if ($content_field == $type) {
          $node->content[$type]['0']['#markup'] = '';
        }
      }
    }
    drupal_add_js(drupal_get_path('module', 'os2web_borger_dk') . '/js/os2web_borger_dk.js', 'file');
    drupal_add_css(drupal_get_path('module', 'os2web_borger_dk') . '/css/os2web_borger_dk.css', 'file');

    // Set the page-title if field-value is given.
    if (!empty($node->field_os2web_borger_dk_pagetitle['und'][0]['value'])) {
      drupal_set_title($node->field_os2web_borger_dk_pagetitle['und'][0]['value']);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function os2web_borger_dk_node_insert($node) {

  if ($node->type == 'os2web_borger_dk_article') {
    if (isset($node->os2web_borger_dk_article)) {
      $borgerdk_data = $node->os2web_borger_dk_article;
      if (isset($borgerdk_data) && !empty($borgerdk_data)) {
        $serialized_data = serialize($borgerdk_data['field_settings']);
        db_insert('os2web_borger_dk_article')
            ->fields(array(
              'nid' => $node->nid,
              'external_id' => $borgerdk_data['external_id'],
              'external_status' => $borgerdk_data['external_status'],
              'external_url' => $borgerdk_data['external_url'],
              'field_settings' => $serialized_data,
              'last_updated' => $borgerdk_data['last_updated'],
              'published_date' => $borgerdk_data['published_date'],
            ))
            ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function os2web_borger_dk_node_delete($node) {
  if ($node->type == 'os2web_borger_dk_article') {
    // First we delete the article-data from the node-additions table.
    db_delete('os2web_borger_dk_article')
        ->condition('nid', $node->nid)
        ->execute();
    // Then we set the status to "not imported" in the "Titles list"-table.
    db_update('os2web_borger_dk_article_titles')
        ->fields(array('ArticleStatus' => 0))
        ->condition('ArticleStatus', $node->nid, '=')
        ->execute();

  }
}

/**
 * Implements hook_node_validate().
 */
function os2web_borger_dk_node_validate($node, $form, &$form_state) {
  if ($node->type == 'os2web_borger_dk_article') {
    // Enforce a minimum word length of 3 on punch lines.
    $admin_title_search = variable_get('os2web_borger_dk_titles_sync', FALSE);
    $titles_search = isset($form_state['values']['os2web_borger_dk_article_title_search']) ? $form_state['values']['os2web_borger_dk_article_title_search'] : FALSE;
    $url_text = isset($form_state['values']['os2web_borger_dk_article_url_text']) ? $form_state['values']['os2web_borger_dk_article_url_text'] : FALSE;

    // If admin config set up : import Borger.dk article by URL.
    // TODO: Check if this if-statement works as expected, and
    // if we can drop the "!isset($node->nid)" part.
    if ((!$admin_title_search) || ($titles_search == '0' && !isset($node->nid))) {
      if (!$titles_search && !isset($node->nid)) {
        if (!empty($url_text)) {
          $url = $url_text;
          $pos = strpos($url, 'borger.dk/Sider');
          if ($pos === FALSE) {
            form_set_error('os2web_borger_dk_article_url_text', t('The Borger.dk-URL is not valid, please write a valid Borger.dk-URL.'));
          }
        }
        else {
          form_set_error('os2web_borger_dk_article_url_text', t('The Borger.dk-URL is empty, please write a valid Borger.dk-URL.'));
        }
      }
    }
    // If admin config set up : import Borger.dk article by article title.
    else {
      // If search article checkbox by Title-search is CHECKED.
      // TODO: Check if we can drop this if-statement. The else-statement above.
      // should be sufficient if the matched if-statement really works.
      if ($titles_search == '1') {
        $borger_dk_title = !empty($form_state['values']['os2web_borger_dk_article_title_text']) ? $form_state['values']['os2web_borger_dk_article_title_text'] : FALSE;
        if (!$borger_dk_title) {
          form_set_error('os2web_borger_dk_article_title_text', t('The Borger.dk Article title is empty, please write a Borger.dk Article title'));
        }
        $matches = array();
        $aid = 0;
        // This preg_match() looks for the last pattern like
        // [33334] and if found extracts the numeric portion.
        $result = preg_match('/\(ID:([0-9]+)\)$/', $borger_dk_title, $matches);
        if ($result > 0) {
          // If $result is nonzero, we found a match and can use
          // it as the index into $matches.
          $aid = $matches[$result];
          $status = db_query('SELECT ArticleStatus FROM {os2web_borger_dk_article_titles} WHERE ArticleID = :aid', array(
            ':aid' => $aid))->fetchField();
          if ($status < 0) {
            // This article is no longer availlable and we tell the user so.
            drupal_set_message(t('The Borger.dk article with title "!title" is no longer availlable', array(
              '!title' => $borger_dk_url)), 'warning');
            form_set_error('os2web_borger_dk_article_title_text', t('The Borger.dk Article-title has been deleted, please write a valid Borger.dk-URL.'));
          }
        }
      }
    }
  }
}

/**
 * Function os2web_borger_dk_sync_submit().
 */
function os2web_borger_dk_sync_submit($form, &$form_state) {
  // Get the node->nid from the form['#node'].
  $nid = $form['#node']->nid;

  // Update the article
  os2web_borger_dk_update_article($nid);

  drupal_set_message(t('The article has been updated with content from Borger.dk'), 'status');
  drupal_goto('node/' . $nid . '/edit');
}

/**
 * Update a single article with latest content from borger.dk
 *
 * @param int $nid
 *   The node we are updating.
 */
function os2web_borger_dk_update_article($nid) {
  // First we find the external_id, and last_update time for this article.
  $data = db_query('SELECT external_id, last_updated FROM {os2web_borger_dk_article} WHERE nid = :nid', array(
    ':nid' => $nid))->fetchObject();

  // Then we fetch the article item from the Borger.dk webservice.
  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  $article = _os2web_borger_dk_GetArticleByID($data->external_id, $wsdl);

  // Now we update the node content with the fetched article content.
  _os2web_borger_dk_update_node_content($nid, $article);

}
/**
 * Update a node with content from borger.dk.
 *
 * @param $node
 *   A node object.
 * @param $context
 *   (optional) Array of additional information about what triggered the action.
 *   Not used for this action.
 *
 * @ingroup actions
 */
function os2web_borger_dk_articles_update_action($node, $context = array()) {
  if ($node->type == 'os2web_borger_dk_article') {
    os2web_borger_dk_update_article($node->nid);
    watchdog('action', 'Update %title with content from borger.dk.', array('%title' => $node->title));
  }
}

/**
 * Function os2web_borger_dk_microarticles_update_submit().
 */
function os2web_borger_dk_microarticles_update_submit($form, &$form_state) {
  // Get the node->nid from the form['#node'].
  $nid = $form['#node']->nid;

  // First we find the external_id, and last_update time for this article.
  $data = db_query('SELECT external_id, last_updated FROM {os2web_borger_dk_article} WHERE nid = :nid', array(
    ':nid' => $nid))->fetchObject();

  // Then we fetch the article item from the Borger.dk webservice.
  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  $article = _os2web_borger_dk_GetArticleByID($data->external_id, $wsdl);

  if (empty($article['Exceptions']) && empty($article['error'])) {
    // First we load the corresponding node.
    $node = node_load($nid, NULL, TRUE);
    $body = '';
    foreach ($article['kernetekst'] as $div => $content) {
      $body .= $content . "\n";
    }
    // Only update the body text.
    $node->body['und'][0]['value'] = $body;
    node_save($node);
    // And we notify the user that the article has been updated.
    drupal_set_message(t('The microarticles have been updated'), 'status');
  }
  else {
    // We notify the user the exceptions or error.
    drupal_set_message(t('There was an error updating microarticles. Please try it later.'), 'status');
  }
  drupal_goto('node/' . $nid . '/edit');
}

/**
 * Implements hook_node_submit().
 */
function os2web_borger_dk_node_submit(&$node, $form, &$form_state) {
  if ($node->type == 'os2web_borger_dk_article') {
    // We must check if this is a "brand new" article or if it exists in the
    // database already (NB: That's how we find out if it is brand new or not)
    // Get the node->nid from the form['#node'].
    $nid = (!empty($form_state['values']['nid'])) ? $form_state['values']['nid'] : NULL;
    if (!empty($nid)) {
      // We have a node and should fetch field-values from form_state
      // nid, external_id, external_url, field_settings,
      // published_date, last_update.
      // EXCEPT: ONLY field_settings CAN BE UPDATED!!
      $field_settings = $form_state['values']['os2web_borger_dk_field_settings'];
      // Check admin field settings : are there fields set as hidden by admin.
      $admin_display_fields = variable_get('os2web_borger_dk_display');
      foreach ($admin_display_fields as $type => $items) {
        if (!$admin_display_fields[$type]) {
          $field_settings[$type] = $type;
        }
      }

      $serialized_data = serialize($field_settings);
      db_update('os2web_borger_dk_article')
          ->fields(array('field_settings' => $serialized_data))
          ->condition('nid', $nid, '=')
          ->execute();

      // Microarticles.---
      $microarticle = variable_get('os2web_borger_dk_microarticle_active');
      // If microarticle is set up to show.
      if ($microarticle) {
        $field_microarticle_settings = array();
        $body_text = isset($node->body['und'][0]['value']) ? $node->body['und'][0]['value'] : '';

        $article_text = '';

        $doc = new DOMDocument();
        $doc->loadHTML('<?xml encoding="utf-8" ?>' . $body_text);
        $xpath = new DOMXPath($doc);

        $results = $xpath->query("//*[@class='microArticle']");

        $microno = 0;
        foreach ($results as $item) {
          $microno++;

          $checkboxno = 'os2web_borger_dk_micro_' . $microno;
          $h2_text_field = 'os2web_borger_dk_micro_h2_' . $microno;
          $text_area = 'os2web_borger_dk_micro_textarea_' . $microno;

          $field_microarticle_settings[$microno] = $node->$checkboxno;
          // Body text (Article text).
          $article_text .= "<div class=\"microArticle\" id=\"microArticle" . $micro_id . "\">" . "\r\n";

          $micro_h2 = "<h2 class=\"mArticle\" id=\"mArticle" . $microno . "\">";
          $micro_h2 .= $node->$h2_text_field . "</h2>";

          $micro_content = "<div class=\"mArticle" . $microno . " mArticle\">";
          $micro_content .= $node->$text_area . "\r\n    </div>";

          $article_text .= $micro_h2 . "\r\n";
          $article_text .= $micro_content;
          $article_text .= "\r\n</div>\r\n\r\n";
          // End of body text (Article text).
        }
        $node->body['und'][0]['value'] = $article_text;
        $node->body['und'][0]['safe_value'] = $article_text;

        $serialized_microarticle = serialize($field_microarticle_settings);
        db_update('os2web_borger_dk_article')
            ->fields(array(
              'field_microarticle_settings' => $serialized_microarticle,
            ))
            ->condition('nid', $nid, '=')
            ->execute();
      }
      // End of Micro articles.
      // All other fields are handled by the normal Drupal field-handling.
    }
    else {
      // We do not(!) have a node->nid and this is a brand new node.
      // We must get the Borger.dk-URL, fetch the article, and store
      // the borger.dk-article content (i.e. the new node).
      $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');

      $titles_autocomplete = variable_get('borger_dk_article_titles_sync', FALSE);
      $borger_dk_url = $form_state['values']['os2web_borger_dk_article_url_text'];
      $borger_dk_title = $form_state['values']['os2web_borger_dk_article_title_text'];
      $search_method = $form_state['values']['os2web_borger_dk_article_title_search'];

      if ($search_method) {
        // The title has been autocompleted, and we must find the ArticleID.
        $matches = array();
        $aid = -1;
        // This preg_match() looks for the last pattern like [33334]
        // and if found extracts the numeric portion.
        $result = preg_match('/\(ID:([0-9]+)\)$/', $borger_dk_title, $matches);
        if ($result > 0) {
          // If $result is nonzero, we found a match and can use
          // it as the index into $matches.
          $aid = $matches[$result];
          $sql = "SELECT `ArticleID`, `ArticleStatus` FROM {os2web_borger_dk_article_titles} WHERE `ArticleID` = " . $aid . " LIMIT 1";
          $data = db_query($sql)->fetchObject();
          if ($data->ArticleStatus < 0) {
            // This article is no longer availlable and we tell the user so.
            drupal_set_message(t('The Borger.dk article with title "!title" is no longer availlable', array(
              '!title' => $borger_dk_title)), 'warning');
            drupal_goto('node/add/os2web-borger-dk-article');
            return;
          }
          elseif ($data->ArticleStatus > 0) {
            // We have already imported this article
            // and node->nid = ArticleStatus.
            drupal_set_message(t('The Borger.dk article with title "!title" has already been imported.', array(
              '!title' => $borger_dk_title)), 'status');
            drupal_set_message(t('You can re-import the article by clicking on the "Update now"-button below.'), 'status');
            drupal_goto('node/' . $data->ArticleStatus . '/edit');
            return;
          }
          elseif ($data->ArticleStatus == 0) {
            $aid = $data->ArticleID;
          }
        }
        else {
          // Lets look for the text directly in our Title list.
          drupal_set_message(t('No Borger.dk article with title "!title" exists.', array(
            '!title' => $borger_dk_title)), 'warning');
          drupal_goto('node/add/os2web-borger-dk-article');
        }
        if (isset($aid) && $aid >= 0) {
          // We have not imported this article before, and we do so now.
          $article = _os2web_borger_dk_GetArticleByID($aid, $wsdl);
        }
        else {
          $borger_dk_title = preg_replace('/ \(ID:([0-9]+)\)$/', '', $borger_dk_title);
          drupal_set_message(t('Could not find any Borger.dk article with title "!title"', array(
            '!title' => $borger_dk_title)), 'warning');
          drupal_goto('node/add/os2web-borger-dk-article');
          return;
        }
      }
      else {
        // Now we fetch the article item from the Borger.dk webservice.
        $article = _os2web_borger_dk_GetArticleByUrl($borger_dk_url, $wsdl);

        if (!empty($article['Exceptions']) || !empty($article['error'])) {
          drupal_set_message(t('An error occured or an exception was thrown by the Borger.dk webservice for the specified URL.'), 'error');
          drupal_set_message(t('You can fetch this article when the webservice is responsive again.'), 'error');
          drupal_goto('node/add/os2web-borger-dk-article');
          return;
        }
      }

      $body = '';
      foreach ($article['kernetekst'] as $div => $content) {
        $body .= $content . "\n";
      }

      // And we update all the node-fields with the article-values.
      $node = new stdClass();
      $node->language = 'und';
      $node->status = $form_state['values']['status'];
      $node->promote = $form_state['values']['promote'];
      $node->sticky = $form_state['values']['sticky'];
      $node->created = !empty($node->date) ? strtotime($node->date) : REQUEST_TIME;
      $node->validated = TRUE;
      // A user might assign the node author by entering a
      // user name in the node.
      $usr = $form['author']['name']['#value'];
      // A user might assign the node author by entering a user name in the node
      // form, which we then need to translate to a user ID.
      if ($account = user_load_by_name($usr)) {
        $node->uid = $account->uid;
      }
      else {
        $node->uid = 0;
      }

      // Insert default value of a new node.
      $node->type = 'os2web_borger_dk_article';
      $node->title = (!empty($article['title'])) ? $article['title'] : '';
      $node->body['und']['0']['value'] = !empty($body) ? $body : '';
      $node->field_os2web_borger_dk_borgerurl['und'][0]['value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
      $node->field_os2web_borger_dk_header['und'][0]['value'] = (!empty($article['header'])) ? $article['header'] : '';
      $node->field_os2web_borger_dk_selfservi['und'][0]['value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
      $node->field_os2web_borger_dk_byline['und'][0]['value'] = (!empty($article['byline'])) ? $article['byline'] : '';
      $node->field_os2web_borger_dk_legislati['und'][0]['value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
      $node->field_os2web_borger_dk_shortlist['und'][0]['value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
      $node->field_os2web_borger_dk_recommend['und'][0]['value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

      $node->body['und']['0']['safe_value'] = $body;
      $node->field_os2web_borger_dk_borgerurl['und'][0]['safe_value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
      $node->field_os2web_borger_dk_header['und'][0]['safe_value'] = (!empty($article['header'])) ? $article['header'] : '';
      $node->field_os2web_borger_dk_selfservi['und'][0]['safe_value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
      $node->field_os2web_borger_dk_byline['und'][0]['safe_value'] = (!empty($article['byline'])) ? $article['byline'] : '';
      $node->field_os2web_borger_dk_legislati['und'][0]['safe_value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
      $node->field_os2web_borger_dk_shortlist['und'][0]['safe_value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
      $node->field_os2web_borger_dk_recommend['und'][0]['safe_value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

      $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
      $node->field_os2web_borger_dk_header['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
      $node->field_os2web_borger_dk_selfservi['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
      $node->field_os2web_borger_dk_byline['und'][0]['format'] = BORGERDK_TEXT_FORMAT_PLAIN;
      $node->field_os2web_borger_dk_legislati['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
      $node->field_os2web_borger_dk_shortlist['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
      $node->field_os2web_borger_dk_recommend['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

      $field_settings = $form_state['values']['os2web_borger_dk_field_settings'];
      // Check admin field settings : are there fields set as hidden by admin.
      $admin_display_fields = variable_get('os2web_borger_dk_display');
      foreach ($admin_display_fields as $type => $items) {
        if (!$admin_display_fields[$type]) {
          $field_settings[$type] = $type;
        }
      }
      // TODO: Perform a logical-test (on paper) to
      // see if the external_status is correct.
      $external_status = (empty($article['Exceptions']) && empty($article['error'])) ? 1 : 0;
      $external_status = (!empty($article['error']) && $article['error_type'] == 'not_found') ? -1 : $external_status;
      $node->os2web_borger_dk_article = array(
        'external_id' => $article['external_id'],
        'external_url' => $article['external_url'],
        'external_status' => $external_status,
        'field_settings' => $field_settings,
        'published_date' => strtotime($article['published_date']),
        'last_updated' => strtotime($article['last_updated']),
      );

      if (!empty($article['Exceptions']) || !empty($article['error'])) {
        drupal_set_message(t('An exception was thrown by the Borger.dk webservice for the specified URL.'), 'error');
        drupal_set_message(t('You can fetch this article when the webservice is responsive again.'), 'error');
        drupal_goto('node/add/os2web-borger-dk-article');
      }
      else {
        $node = node_submit($node);

        // We need to store the field values and article-settings.
        node_save($node);

        // Then we need to update the ArticleStatus in the Title-list.
        if ($node->nid) {
          db_update('os2web_borger_dk_article_titles')
              ->fields(array('ArticleStatus' => $node->nid))
              ->condition('ArticleID', $article['external_id'], '=')
              ->execute();
          drupal_goto('node/' . $node->nid . '/edit');
        }
      }
    }
  }
}


/*********************   Menu import ************/
/**
 * Function os2web_borger_dk_import_menu_now_form_submit().
 */
function os2web_borger_dk_import_menu_now_form_submit($form, &$form_state) {
  if (($form_state['submitted'] == 1) && ($form_state['input']['op'] == 'Import Borger.dk-menu now')) {
    // Next we get a list of all menu-items from the Borger.dk-webservice.
    $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
    $menu_items_availlable = _os2web_borger_dk_GetAllSites($wsdl);

    if (!empty($menu_items_availlable['Exceptions']) || !empty($menu_items_availlable['error'])) {
      $msg = 'An error occured while fetching the Borger.dk menus. Last succesful update was at: %success';
      watchdog('Borger.dk-articles', $msg, $variables = array('%success' => $updated_at));
      return;
    }

    $parent_array = array();
    // Make a array of parenet id : parent name.
    foreach ($menu_items_availlable as $item) {
      $item_site_id = $item['SiteID'];
      $parent_array[$item_site_id] = $item['SiteTitle'];
    }
    $total = count($menu_items_availlable);
    // $menu_name = $form['build_borger_menu_under_menu']['#value'];
    $menu_name = variable_get('build_borger_menu_under_menu');

    os2web_borger_dk_create_custom_menu($menu_items_availlable, $total, $parent_array, $menu_name);
  }
}

/**
 * Function os2web_borger_dk_create_custom_menu().
 *
 * Create a custom menu.
 */
function os2web_borger_dk_create_custom_menu($menu_items_availlable, $total, $parent_array, $menu_name) {
  $borger_dk_menu = variable_get('os2web_borger_dk_borger_dk_menu_name', t('Borger.dk menu'));
  if ($menu_name == 'borgerdkmenu2' && $borger_dk_menu == 'Borger.dk menu') {
    $existing_menu = db_query('SELECT * FROM {menu_custom} WHERE menu_name = :menu_name',
                       array('menu_name' => $menu_name))->fetchAssoc();
    if (!$existing_menu) {
      $menu = array();
      $menu['menu_name'] = 'borgerdkmenu2';
      $menu['title'] = $borger_dk_menu;
      $menu['description'] = "The <em>Presentation tabs</em> menu contains links to presentation detail";
      menu_save($menu);
    }
  }
  /* elseif ($menu_name != 'borgerdkmenu2') {
    $existing_menu = db_query('SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name',
                              array('link_title' => $borger_dk_menu, 'menu_name' => $menu_name))->fetchAssoc();
    if (!$existing_menu) {
      $menu_item = array(
        'menu_name' => $menu_name,
        'link_path' => 'node',
        'link_title' => $borger_dk_menu,
        'module' => 'os2web_borger_dk',
        'plid' => 0,
    );
    menu_link_save($menu_item);
    }
  }*/

  $operations[] = array();
  // Then import the menu from Borger.dk and tag all imported articles.
  $operations[] = array('_os2web_borger_dk_menus_cronbatch_wrapper', array($total));

  $groups = array_chunk($menu_items_availlable, 10);
  foreach ($groups as $gid => $group) {
    // Set the batch operation to import 10 menu items each time.
    $operations[] = array(
      '_os2web_borger_dk_import_menu_items',
      array($group, $total, $parent_array, $menu_name),
    );
  }

  $batch = array(
    'operations' => $operations,
    'title' => t('Importing menu from Borger.dk'),
    'init_message' => t('Import job is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'finished' => 'os2web_borger_dk_batch_menu_import_finished',
  );
  // Finally we execute the batch process(es).
  batch_set($batch);
  // menu_cache_clear_all();
  // menu_link_load($menu);
}

/**
 * Function _os2web_borger_dk_import_menu_items().
 */
function _os2web_borger_dk_import_menu_items($group, $total, $parent_array, $menu_name, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $total;
  }
  foreach ($group as $item) {
    $item_site_id = $item['SiteID'];
    $item_pid = $item['ParentID'];
    $menu_item = array();
    // The first menu item from Borger.dk does NOT contain a parent ID.
    // 'Emner', it is the root of Borger.dk menu tree structure.
    if (empty($item['ParentID'])) {
      $mlid = db_query('SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name', array('link_title' => $item['SiteTitle'], 'menu_name' => $menu_name))->fetchAssoc();
      // If the menu link is NOT existed.
      if (!$mlid) {
        $nid = _os2web_borger_dk_create_menu_page($item);
        $menu_item = array(
          'menu_name' => $menu_name,
          'link_path' => "node/" . $nid,
          'link_title' => $item['SiteTitle'],
          'module' => 'os2web_borger_dk',
          'plid' => $item_pid,
        );
        menu_link_save($menu_item);
      }
      // Update our progress information.
      $context['sandbox']['progress']++;
    }
    else {
      $mlid = db_query('SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name', array('link_title' => $item['SiteTitle'], 'menu_name' => $menu_name))->fetchAssoc();
      // If the menu link is NOT existed.
      $existing_parent = db_query('SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name', array('link_title' => $parent_array[$item_pid], 'menu_name' => $menu_name))->fetchAssoc();
      if ($existing_parent && !$mlid) {
        // Create a menu page for the Menu item (path).
        $nid = _os2web_borger_dk_create_menu_page($item);
        $menu_item = array(
          'menu_name' => $menu_name,
          'link_path' => "node/" . $nid,
          'link_title' => $item['SiteTitle'],
          'module' => 'os2web_borger_dk',
          'plid' => $existing_parent['mlid'],
        );
        menu_link_save($menu_item);
      }
      // Update our progress information.
      $context['sandbox']['progress']++;
    }
  }
  $context['finished'] = 1;
}
/**
 * Function _os2web_borger_dk_create_menu_page().
 */
function _os2web_borger_dk_create_menu_page($item) {
  $result = db_query('SELECT * FROM {node} WHERE type = :type AND title = :title',
                     array('type' => 'menu_page', 'title' => $item['SiteTitle']))->fetchAssoc();
  if (!$result) {
    $node = new stdClass();
    $node->created = !empty($node->date) ? strtotime($node->date) : REQUEST_TIME;
    $node->validated = TRUE;

    // Insert default value of a new node.
    $node->type = 'menu_page';
    $node->title = $item['SiteTitle'];
    $node->body['und']['0']['value'] = '';
    $node->body['und']['0']['safe_value'] = '';
    $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
    $node = node_submit($node);
    node_save($node);
    return $node->nid;
  }
  else {
    return $result['nid'];
  }

}

/**
 * Funtion : Get articleIds from each pages/site.
 */
function _os2web_borger_dk_GetArticleIDsBySiteID($site_id, $wsdl = 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl', $use_constraints = TRUE) {
  $error = array();
  // The ID of the Borger.dk-site to get must be given as argument.
  if (empty($site_id)) {
    return $error;
  }
  $ids = array();
  // We use a soap-client to fetch the specified article from Borger.dk.
  $client = new SoapClient($wsdl, array('exceptions' => 0));

  // Then we execute our webservice-request.
  $array_get_article_ids = array('siteID' => $site_id);

  $result_article = $client->GetArticleIDsBySiteID($array_get_article_ids);
  if (is_soap_fault($result_article)) {
    // An error was encountered and we examine it more closely.
    $error = _os2web_borger_dk_translate_soap_fault(2, $result_article->faultcode, $result_article->faultstring);

    return $error;
  }
  else {
    $article_ids = $result_article->GetArticleIDsBySiteIDResult;
    if (isset($article_ids->ArticleShortDescription)) {
      if (is_array($article_ids->ArticleShortDescription)) {
        foreach ($article_ids->ArticleShortDescription as $article_id) {
          $ids[] = $article_id->ArticleID;
        }
      }
      else {
        $ids[] = $article_ids->ArticleShortDescription->ArticleID;
      }
    }
  }
  return $ids;
}

/**
 * Function _os2web_borger_dk_menus_cronbatch_wrapper().
 *
 * A batch-wrapper so that the cronbatch function can
 * also be run via the browser, and not just as a cron-job.
 */
function _os2web_borger_dk_menus_cronbatch_wrapper($max_count, &$context) {
  // _os2web_borger_dk_menus_cronbatch(TRUE);
  $context['sandbox']['progress']++;
  $context['message'] = t("Importing the menu from Borger.dk.");
  $context['finished'] = 1;
}
/**
 * Function os2web_borger_dk_batch_article_import_finished().
 *
 * When menu structure is imported, show message and go
 * to next process: import articles.
 */
function os2web_borger_dk_batch_menu_import_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The Borger.dk menu items are imported.'));
    drupal_set_message(t('You can now import all articles from Borger.dk'));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  menu_cache_clear_all();
  // _os2web_borger_dk_import_all_articles();
  drupal_goto('admin/config/os2web_borger_dk/settings');
}
/**
 * Function os2web_borger_dk_import_articles_now_form_submit().
 */
function os2web_borger_dk_import_articles_now_form_submit($form, &$form_state) {
  if ($form_state['submitted'] == 1) {
    // First we find the list of availlable articles at Borger.dk.
    $operations = array();
    $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
    $titles_availlable = _os2web_borger_dk_GetAllArticles($wsdl, FALSE);

    // Then get a list of already imported articles to update.
    $update_items = array();
    $sql = 'SELECT n.nid, ba.external_id FROM {node} AS n LEFT JOIN {os2web_borger_dk_article} AS ba ON n.nid = ba.nid WHERE n.type LIKE :node_type';
    $result = db_query($sql, array(':node_type' => 'os2web_borger_dk_article'));
    foreach ($result as $record) {
      $update_items[$record->external_id] = $record->nid;
    }

    // Create a list of batch-operations to perform for every 10 articles.
    $max_count = 0;
    $full_id_list = array();
    foreach ($titles_availlable as $title) {
      if (isset($title['ArticleID'])) {
        $full_id_list[] = $title['ArticleID'];
        $max_count += 1;
      }

    }
    // We add 1 to the max_count because we have to create menu_links.
    // after all the articles have been imported.
    $max_count += 1;

    // Then we split the lsit of id's to import into groups of 10.
    $groups = array_chunk($full_id_list, 10);
    foreach ($groups as $gid => $group) {
      // Set the batch operation to import 10 articles at a time.
      $operations[] = array('_os2web_borger_dk_batch_article_import', array($group,
          $max_count, $update_items));
    }

    // Then import the menu from Borger.dk and tag all imported articles.
    $operations[] = array('_os2web_borger_dk_articles_cronbatch_wrapper', array($max_count));

    $batch = array(
      'operations' => $operations,
      'title' => t('Importing articles from Borger.dk'),
      'init_message' => t('Import job is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'finished' => 'os2web_borger_dk_batch_article_import_finished',
    );

    // Finally we execute the batch process(es).
    batch_set($batch);
  }
}
/**
 * Function _os2web_borger_dk_batch_article_import().
 */
function _os2web_borger_dk_batch_article_import($external_id_list, $max_count, $update_items, &$context) {
  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $max_count;
  }

  foreach ($external_id_list as $eid) {
    // Import the Borger.dk-article with the given ArticleID.
    $article = _os2web_borger_dk_GetArticleByID($eid, $wsdl, FALSE);
    if (empty($article['Exceptions']) && empty($article['error'])) {
      $title = $article['title'];

      $nid = FALSE;
      // Then check if this node should be updated or created.
      if (!isset($update_items[$eid])) {
        // And we update all the node-fields with the article-values.
        $node = new stdClass();
        $node->created = !empty($node->date) ? strtotime($node->date) : REQUEST_TIME;
        $node->validated = TRUE;

        // Insert default value of a new node.
        $node->type = 'os2web_borger_dk_article';
        $node->title = (!empty($article['title'])) ? $article['title'] : '';
        $node->body['und']['0']['value'] = !empty($body) ? $body : '';
        $node->field_os2web_borger_dk_borgerurl['und'][0]['value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
        $node->field_os2web_borger_dk_header['und'][0]['value'] = (!empty($article['header'])) ? $article['header'] : '';
        $node->field_os2web_borger_dk_selfservi['und'][0]['value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
        $node->field_os2web_borger_dk_byline['und'][0]['value'] = (!empty($article['byline'])) ? $article['byline'] : '';
        $node->field_os2web_borger_dk_legislati['und'][0]['value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
        $node->field_os2web_borger_dk_shortlist['und'][0]['value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
        $node->field_os2web_borger_dk_recommend['und'][0]['value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

        $node->body['und']['0']['safe_value'] = $body;
        $node->field_os2web_borger_dk_borgerurl['und'][0]['safe_value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
        $node->field_os2web_borger_dk_header['und'][0]['safe_value'] = (!empty($article['header'])) ? $article['header'] : '';
        $node->field_os2web_borger_dk_selfservi['und'][0]['safe_value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
        $node->field_os2web_borger_dk_byline['und'][0]['safe_value'] = (!empty($article['byline'])) ? $article['byline'] : '';
        $node->field_os2web_borger_dk_legislati['und'][0]['safe_value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
        $node->field_os2web_borger_dk_shortlist['und'][0]['safe_value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
        $node->field_os2web_borger_dk_recommend['und'][0]['safe_value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

        $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
        $node->field_os2web_borger_dk_header['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
        $node->field_os2web_borger_dk_selfservi['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
        $node->field_os2web_borger_dk_byline['und'][0]['format'] = BORGERDK_TEXT_FORMAT_PLAIN;
        $node->field_os2web_borger_dk_legislati['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
        $node->field_os2web_borger_dk_shortlist['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
        $node->field_os2web_borger_dk_recommend['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

        $field_settings = $form_state['values']['os2web_borger_dk_field_settings'];
        // Check admin field settings : are there fields set as hidden by admin.
        $admin_display_fields = variable_get('os2web_borger_dk_display');
        foreach ($admin_display_fields as $type => $items) {
          if (!$admin_display_fields[$type]) {
            $field_settings[$type] = $type;
          }
        }
        // TODO: Perform a logical-test (on paper) to
        // see if the external_status is correct.
        $external_status = (empty($article['Exceptions']) && empty($article['error'])) ? 1 : 0;
        $external_status = (!empty($article['error']) && $article['error_type'] == 'not_found') ? -1 : $external_status;
        $node->os2web_borger_dk_article = array(
          'external_id' => $article['external_id'],
          'external_url' => $article['external_url'],
          'external_status' => $external_status,
          'field_settings' => $field_settings,
          'published_date' => strtotime($article['published_date']),
          'last_updated' => strtotime($article['last_updated']),
        );

        if (!empty($article['Exceptions']) || !empty($article['error'])) {
          drupal_set_message(t('An exception was thrown by the Borger.dk webservice for the specified URL.'), 'error');
          drupal_set_message(t('You can fetch this article when the webservice is responsive again.'), 'error');
        }
        else {
          $node = node_submit($node);

          // We need to store the field values and article-settings.
          node_save($node);

          // Then we need to update the ArticleStatus in the Title-list.
          if ($node->nid) {
            db_update('os2web_borger_dk_article_titles')
                ->fields(array('ArticleStatus' => $node->nid))
                ->condition('ArticleID', $article['external_id'], '=')
                ->execute();
          }
        }
        $nid = $node->nid;
      }
      else {
        // This is an already imported article, and we should
        // update the node-content.
        $nid = $update_items[$eid];
      }

      // If a nid was found we can update the node with the
      // article from Borger.dk.
      if ($nid) {
        _os2web_borger_dk_update_node_content($nid, $article);
      }
      $context['results'][] = $nid . ' : ' . check_plain($title);
      $context['message'] = 'Imported title: ' . check_plain($title);
    }
    else {
      $context['results'][] = 'Error: Could not import article with ArticleID: ' . $eid;
      $context['message'] = 'Error: Could not import article with ArticleID: ' . $eid;
    }

    // Update our progress information.
    $context['sandbox']['progress']++;
  }
  $context['finished'] = 1;

}
/**
 * Function _os2web_borger_dk_articles_cronbatch_wrapper().
 */
function _os2web_borger_dk_articles_cronbatch_wrapper() {
  // _os2web_borger_dk_menus_cronbatch(TRUE);
  $context['sandbox']['progress']++;
  $context['message'] = t("Importing articles from Borger.dk.");
  $context['finished'] = 1;
}
/**
 * Function os2web_borger_dk_batch_article_import_finished().
 */
function os2web_borger_dk_batch_article_import_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count results processed.', array('@count' => count($results))));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  drupal_goto('admin/config/os2web_borger_dk/settings');
}
/**
 * Function os2web_os2web_borger_dk_create_borger_dk_menu_now_form_submit().
 *
 * Create links to articles under a chosen menu.
 */
function os2web_borger_dk_create_borger_dk_menu_now_form_submit($form, &$form_state) {
  if ($form_state['submitted'] == 1) {

    // Next we get a list of all menu-items from the Borger.dk-webservice.
    $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
    $menu_items_availlable = _os2web_borger_dk_GetAllSites($wsdl);

    if (!empty($menu_items_availlable['Exceptions']) || !empty($menu_items_availlable['error'])) {
      $msg = 'An error occured while fetching the Borger.dk menus. Last succesful update was at: %success';
      watchdog('Borger.dk-articles', $msg, $variables = array('%success' => $updated_at));
      return;
    }

    $total = count($menu_items_availlable);
    $menu_name = variable_get('build_borger_menu_under_menu');
    $operations[] = array();
    // Then import the menu from Borger.dk and tag all imported articles.
    $operations[] = array('_os2web_borger_dk_create_menustructure_cronbatch_wrapper', array($total));

    foreach ($menu_items_availlable as $item) {
      $operations[] = array(
        '_os2web_borger_dk_create_borger_dk_meun_structure',
        array($item, $total, $menu_name),
      );
    }
    /*  $groups = array_chunk($menu_items_availlable, 10);
    foreach ($groups as $gid => $group) {
      // Set the batch operation to import 10 menu items each time.
      $operations[] = array('_os2web_borger_dk_create_borger_dk_meun_structure', array($group, $total));
    }*/

    $batch = array(
      'operations' => $operations,
      'title' => t('Create Borger.dk menu structure'),
      'init_message' => t('Create job is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'finished' => 'os2web_borger_dk_batch_menustructure_create_finished',
    );
    // Finally we execute the batch process(es).
    batch_set($batch);
  }
}
/**
 * Function _os2web_borger_dk_create_borger_dk_meun_structure().
 */
function _os2web_borger_dk_create_borger_dk_meun_structure($item, $total, $menu_name, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $total;
  }
  /* This part is only for Ishøj kommune or other u
   * sers where they create their own
   * 'Emner' menu link and rename it to 'Borger'.
   */
  if ($item['SiteTitle'] == 'Emner') {
    $result = db_query('SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name',
                  array('link_title' => 'Borger', 'menu_name' => $menu_name))->fetchAssoc();
    if ($result) {
      $item['SiteTitle'] = 'Borger';
    }
  }

  // Search each menu link under the given menu_name.
  $pid = db_query('SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name',
                  array('link_title' => $item['SiteTitle'], 'menu_name' => $menu_name))->fetchAssoc();
  if ($pid) {
    // If the menu link is existed, then get all article
    // IDs in the menu link page.
    $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
    $article_ids = _os2web_borger_dk_GetArticleIDsBySiteID($item['SiteID'], $wsdl);
    // When there are articles with IDs under the page.
    if (!empty($article_ids)) {
      foreach ($article_ids as $id => $value) {
        // TODO: check if the links is existed.!!!!
        // Check if article is existed.
        $result = db_query("SELECT `ArticleID`, `ArticleStatus`, `ArticleTitle` FROM {os2web_borger_dk_article_titles}
                           WHERE `ArticleID` = " . $value);
        if ($result) {
          foreach ($result as $row) {
            $article_title = $row->ArticleTitle;
            $query = 'SELECT * FROM {menu_links} WHERE link_title= :link_title AND menu_name = :menu_name AND plid = :plid';
            $mlid = db_query($query, array(
                      'link_title' => $article_title,
                      'menu_name' => $menu_name,
                      'plid' => $pid['mlid'])
                    )->fetchAssoc();
            if ($mlid) {
              return;
            }
            if ($row->ArticleStatus > 0) {
              $menu_item = array(
                'menu_name' => $menu_name,
                'link_path' => "node/" . $row->ArticleStatus,
                'link_title' => $row->ArticleTitle,
                'module' => 'os2web_borger_dk',
                'plid' => isset($pid['mlid']) ? $pid['mlid'] : 0,
              );
              menu_link_save($menu_item);
            }
            // If the article is NOT imported yet, so import it.
            else {
              $article = _os2web_borger_dk_GetArticleByID($value, $wsdl, FALSE);

              if (empty($article['Exceptions']) && empty($article['error'])) {
                $body = '';
                foreach ($article['kernetekst'] as $div => $content) {
                  $body .= $content . "\n";
                }

                $title = $article['title'];
                $nid = FALSE;
                $node = new stdClass();
                $node->created = !empty($node->date) ? strtotime($node->date) : REQUEST_TIME;
                $node->validated = TRUE;
                // Insert default value of a new node.
                $node->type = 'os2web_borger_dk_article';
                $node->title = (!empty($article['title'])) ? $article['title'] : '';
                $node->body['und']['0']['value'] = !empty($body) ? $body : '';
                $node->field_os2web_borger_dk_borgerurl['und'][0]['value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
                $node->field_os2web_borger_dk_header['und'][0]['value'] = (!empty($article['header'])) ? $article['header'] : '';
                $node->field_os2web_borger_dk_selfservi['und'][0]['value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
                $node->field_os2web_borger_dk_byline['und'][0]['value'] = (!empty($article['byline'])) ? $article['byline'] : '';
                $node->field_os2web_borger_dk_legislati['und'][0]['value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
                $node->field_os2web_borger_dk_shortlist['und'][0]['value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
                $node->field_os2web_borger_dk_recommend['und'][0]['value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

                $node->body['und']['0']['safe_value'] = $body;
                $node->field_os2web_borger_dk_borgerurl['und'][0]['safe_value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
                $node->field_os2web_borger_dk_header['und'][0]['safe_value'] = (!empty($article['header'])) ? $article['header'] : '';
                $node->field_os2web_borger_dk_selfservi['und'][0]['safe_value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
                $node->field_os2web_borger_dk_byline['und'][0]['safe_value'] = (!empty($article['byline'])) ? $article['byline'] : '';
                $node->field_os2web_borger_dk_legislati['und'][0]['safe_value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
                $node->field_os2web_borger_dk_shortlist['und'][0]['safe_value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
                $node->field_os2web_borger_dk_recommend['und'][0]['safe_value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

                $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
                $node->field_os2web_borger_dk_header['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
                $node->field_os2web_borger_dk_selfservi['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
                $node->field_os2web_borger_dk_byline['und'][0]['format'] = BORGERDK_TEXT_FORMAT_PLAIN;
                $node->field_os2web_borger_dk_legislati['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
                $node->field_os2web_borger_dk_shortlist['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
                $node->field_os2web_borger_dk_recommend['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

                $field_settings = $form_state['values']['os2web_borger_dk_field_settings'];
                // Check admin field settings : are there fields
                // set as hidden by admin.
                $admin_display_fields = variable_get('os2web_borger_dk_display');
                foreach ($admin_display_fields as $type => $items) {
                  if (!$admin_display_fields[$type]) {
                    $field_settings[$type] = $type;
                  }
                }
                // TODO: Perform a logical-test (on paper) to
                // see if the external_status is correct.
                $external_status = (empty($article['Exceptions']) && empty($article['error'])) ? 1 : 0;
                $external_status = (!empty($article['error']) && $article['error_type'] == 'not_found') ? -1 : $external_status;
                $node->os2web_borger_dk_article = array(
                  'external_id' => $article['external_id'],
                  'external_url' => $article['external_url'],
                  'external_status' => $external_status,
                  'field_settings' => $field_settings,
                  'published_date' => strtotime($article['published_date']),
                  'last_updated' => strtotime($article['last_updated']),
                );

                if (!empty($article['Exceptions']) || !empty($article['error'])) {
                  drupal_set_message(t('An exception was thrown by the Borger.dk webservice for the specified URL.'), 'error');
                  drupal_set_message(t('You can fetch this article when the webservice is responsive again.'), 'error');
                }
                else {
                  $node = node_submit($node);
                  // We need to store the field values and article-settings.
                  node_save($node);
                  // Then we need to update the ArticleStatus in the Title-list.
                  if ($node->nid) {
                    db_update('os2web_borger_dk_article_titles')
                      ->fields(array('ArticleStatus' => $node->nid))
                      ->condition('ArticleID', $article['external_id'], '=')
                      ->execute();
                  }
                  $menu_item = array(
                    'menu_name' => $menu_name,
                    'link_path' => "node/" . $node->nid,
                    'link_title' => $node->title,
                    'module' => 'os2web_borger_dk',
                    'plid' => isset($pid['mlid']) ? $pid['mlid'] : 0,
                  );
                  menu_link_save($menu_item);
                }
              }
            }
          }
        }
        // If article is NOT existed, then import by articleID.
        else {
          _os2web_borger_dk_import_supplement_article($value);
        }
        // Update our progress information.
        $context['sandbox']['progress']++;
      }
    }
    /*
    // TODO: list links for menu page.here!
    $node_id = $pid['link_path'];
    $node_id = substr($node_id, 5, strlen($node_id)-1);

    $body_content = '';
    $children = db_query('SELECT * FROM {menu_links} WHERE plid= :plid AND menu_name = :menu_name',
                              array('plid' => $pid['mlid'], 'menu_name' => $menu_name));
    if ($children) {
      foreach ($children as $child) {
        $body_content = $body_content . "<p><a href= '". $child->link_path ."'> " . $child->link_title ." </a>" . "\n";
      }

      if (!empty($node_id)) {
        $node = node_load($node_id);
        $node->body['und']['0']['value'] = $body_content;
        $node->body['und']['0']['safe_value'] = $body_content;
        $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
        node_save($node);
      }
    }*/
  }

  $context['finished'] = 1;
}
/**
 * Functioin _os2web_borger_dk_import_supplement_article().
 */
function _os2web_borger_dk_import_supplement_article($value) {
  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  // Import the Borger.dk-article with the given ArticleID.
  $article = _os2web_borger_dk_GetArticleByID($value, $wsdl, FALSE);

  if (empty($article['Exceptions']) && empty($article['error'])) {
    $body = '';
    foreach ($article['kernetekst'] as $div => $content) {
      $body .= $content . "\n";
    }

    $title = $article['title'];
    $nid = FALSE;
    $node = new stdClass();
    $node->created = !empty($node->date) ? strtotime($node->date) : REQUEST_TIME;
    $node->validated = TRUE;
    // Insert default value of a new node.
    $node->type = 'os2web_borger_dk_article';
    $node->title = (!empty($article['title'])) ? $article['title'] : '';
    $node->body['und']['0']['value'] = !empty($body) ? $body : '';
    $node->field_os2web_borger_dk_borgerurl['und'][0]['value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
    $node->field_os2web_borger_dk_header['und'][0]['value'] = (!empty($article['header'])) ? $article['header'] : '';
    $node->field_os2web_borger_dk_selfservi['und'][0]['value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
    $node->field_os2web_borger_dk_byline['und'][0]['value'] = (!empty($article['byline'])) ? $article['byline'] : '';
    $node->field_os2web_borger_dk_legislati['und'][0]['value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
    $node->field_os2web_borger_dk_shortlist['und'][0]['value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
    $node->field_os2web_borger_dk_recommend['und'][0]['value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

    $node->body['und']['0']['safe_value'] = $body;
    $node->field_os2web_borger_dk_borgerurl['und'][0]['safe_value'] = (!empty($article['external_url'])) ? $article['external_url'] : '';
    $node->field_os2web_borger_dk_header['und'][0]['safe_value'] = (!empty($article['header'])) ? $article['header'] : '';
    $node->field_os2web_borger_dk_selfservi['und'][0]['safe_value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
    $node->field_os2web_borger_dk_byline['und'][0]['safe_value'] = (!empty($article['byline'])) ? $article['byline'] : '';
    $node->field_os2web_borger_dk_legislati['und'][0]['safe_value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
    $node->field_os2web_borger_dk_shortlist['und'][0]['safe_value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
    $node->field_os2web_borger_dk_recommend['und'][0]['safe_value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';

    $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
    $node->field_os2web_borger_dk_header['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
    $node->field_os2web_borger_dk_selfservi['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
    $node->field_os2web_borger_dk_byline['und'][0]['format'] = BORGERDK_TEXT_FORMAT_PLAIN;
    $node->field_os2web_borger_dk_legislati['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
    $node->field_os2web_borger_dk_shortlist['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;
    $node->field_os2web_borger_dk_recommend['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

    $field_settings = $form_state['values']['os2web_borger_dk_field_settings'];
    // Check admin field settings : are there fields set as hidden by admin.
    $admin_display_fields = variable_get('os2web_borger_dk_display');
    foreach ($admin_display_fields as $type => $items) {
      if (!$admin_display_fields[$type]) {
        $field_settings[$type] = $type;
      }
    }
    // TODO: Perform a logical-test (on paper) to
    // see if the external_status is correct.
    $external_status = (empty($article['Exceptions']) && empty($article['error'])) ? 1 : 0;
    $external_status = (!empty($article['error']) && $article['error_type'] == 'not_found') ? -1 : $external_status;
    $node->os2web_borger_dk_article = array(
      'external_id' => $article['external_id'],
      'external_url' => $article['external_url'],
      'external_status' => $external_status,
      'field_settings' => $field_settings,
      'published_date' => strtotime($article['published_date']),
      'last_updated' => strtotime($article['last_updated']),
    );

    if (!empty($article['Exceptions']) || !empty($article['error'])) {
      drupal_set_message(t('An exception was thrown by the Borger.dk webservice for the specified URL.'), 'error');
      drupal_set_message(t('You can fetch this article when the webservice is responsive again.'), 'error');
    }
    else {
      $node = node_submit($node);
      // We need to store the field values and article-settings.
      node_save($node);
      // Then we need to update the ArticleStatus in the Title-list.
      if ($node->nid) {
        db_insert('os2web_borger_dk_article_titles')
          ->fields(array('ArticleStatus' => $node->nid))
          ->condition('ArticleID', $article['external_id'], '=')
          ->execute();
        db_insert('os2web_borger_dk_article_titles')
          ->fields(array(
            'ArticleID' => $article['external_id'],
            'ArticleTitle' => $article['title'],
            'ArticleUrl' => $article['external_url'],
            'LastUpdated' => strtotime($article['last_updated']),
            'PublishingDate' => strtotime($article['published_date']),
            'FORMFields' => $article['FORMFields'],
          ))
          ->execute();
      }
      $menu_item = array(
        'menu_name' => $menu_name,
        'link_path' => "node/" . $node->nid,
        'link_title' => $node->title,
        'module' => 'os2web_borger_dk',
        'plid' => isset($pid['mlid']) ? $pid['mlid'] : 0,
      );
      menu_link_save($menu_item);
    }
  }
}
/**
 * Function _os2web_borger_dk_create_menustructure_cronbatch_wrapper().
 */
function _os2web_borger_dk_create_menustructure_cronbatch_wrapper($max_count, &$context) {
  $context['sandbox']['progress']++;
  $context['message'] = t("Creating Borger.dk menu structure.");
  $context['finished'] = 1;
}
/**
 * Function os2web_borger_dk_batch_menustructure_create_finished().
 */
function os2web_borger_dk_batch_menustructure_create_finished($success, $results, $operations) {
  if ($success) {
    $menu_name = variable_get('build_borger_menu_under_menu');

    drupal_set_message(t('Borger.dk menu structure import is finished.'));
    drupal_set_message(t('You can view the menu structure here "!url".',
                         array('!url' => l(t('Borger.dk menu structure'), 'admin/structure/menu/manage/' . $menu_name))));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  menu_cache_clear_all();

  // Finished.
  drupal_goto('admin/config/os2web_borger_dk/settings');
}
/***************** End of menu import *****************************************/

/**
 * Implements hook_cron().
 */
function os2web_borger_dk_cron() {
  $cron_settings_time_articles = variable_get('os2web_borger_dk_nightly_article_sync', FALSE);
  $titles_autocomplete = variable_get('os2web_borger_dk_titles_sync', FALSE);
  $borger_dk_menus_import = variable_get('os2web_borger_dk_menus_import', FALSE);
  $cron_settings_time_menus = variable_get('os2web_borger_dk_nightly_menu_sync');

  // Then we can find out if it is time for our cron-job to run.
  if (!empty($cron_settings_time_articles) || !empty($cron_settings_time_menus)) {
    $current_time = time();
    $current_hour = date('G', $current_time);
    if ($current_hour == '0') {
      $current_hour = '24';
    }

    // Is it time for auto-updating imported Borger.dk-articles.
    if ($cron_settings_time_articles == $current_hour) {
      // Run the auto-update for articles already imported.
      _os2web_borger_dk_cronbatch();

      // Fetch availlable Borger.dk-titles if autocomplete has been activated.
      if ($titles_autocomplete) {
        // We must fetch a list of all availlable articles from Borger.dk.
        _os2web_borger_dk_titles_cronbatch();
      }
    }

    // Is it time for auto-updating imported Borger.dk-menus.
    if ($cron_settings_time_menus == $current_hour) {
      $this_run = time();
      $last_run = variable_get('os2web_borger_dk_menus_last_update', $this_run);
      $weekly = variable_get('os2web_borger_dk_weekly_borger_dk_menus_import', 0);
      // 7 * 24 * 60 * 60 = 604800. We deduct 800 seconds to give
      // the cron-request some time to start.
      if (!empty($weekly) && ($weekly > 0) && ($this_run - $last_run > 604000)) {
        // It is "about" a week ago now, so we start the cronbatch-job now.
        _os2web_borger_dk_menus_cronbatch();
      }
      elseif (empty($weekly) || ($weekly == 0)) {
        // If run daily then we start the cronbatch-job now.
        _os2web_borger_dk_menus_cronbatch();
      }
    }
  }

  // We check for deleted-items in the queue at every cron-run.
  _os2web_borger_dk_cron_queue();
}

/**
 * Function _os2web_borger_dk_cron_queue().
 */
function _os2web_borger_dk_cron_queue() {
  $queue = DrupalQueue::get('os2web_borger_dk_delete_queue');
  $result = db_query('SELECT nid, external_id FROM {os2web_borger_dk_article} WHERE external_status = -2');
  foreach ($result as $item) {
    $qitem = array('nid' => $item->nid, 'external_id' => $item->external_id);
    $queue->createItem($qitem);
  }
}

/**
 * Function _os2web_borger_dk_cronbatch().
 */
function _os2web_borger_dk_cronbatch() {
  // First we determine the time for our last check for new updates.
  $this_run = time();
  $last_run = variable_get('os2web_borger_dk_last_update', time());
  $updated_after = date('Y-m-d\TH\:i\:s', $last_run);
  $titles_autocomplete = variable_get('os2web_borger_dk_titles_sync', FALSE);

  // Next we get a list of all imported articles.
  $article_id_list = array();
  $article_id_to_nid = array();
  $result = db_query('SELECT nid, external_id FROM {os2web_borger_dk_article} WHERE external_status > 0');
  foreach ($result as $item) {
    // We also build an index of "external_id" => "nid".
    $article_id2nid[$item->external_id] = $item->nid;
    $article_id_list[] = $item->external_id;
  }

  // Then we get all the updated articles. We can not(!) use the LastUpdated-
  // field in the 'os2web_borger_dk_titles'-table since it only works when
  // titles-autocomplete has been activated.
  $articles = array();
  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  $articles = _os2web_borger_dk_GetArticlesByIDs($article_id_list, $updated_after, $wsdl);

  // We must check if the webservice throws ANY errors.
  $any_webservice_errors = FALSE;
  // $deleted_items = array();
  $deleted_ids = array();
  $error_items = array();
  // And for each of the found articles we update the node content.
  foreach ($articles as $article) {
    $external_id = $article['external_id'];
    // We only update articles we already know the nid for (just in case).
    if (!empty($article_id2nid[$external_id])) {
      $nid = $article_id2nid[$external_id];

      // First we check if the article is an error-array.
      if (empty($article['no_updates'])) {
        // We only update articles that does not contain an error.
        if (empty($article['Exceptions']) && empty($article['error'])) {
          _os2web_borger_dk_update_node_content($nid, $article);
        }
        if (!empty($article['Exceptions'])) {
          $any_webservice_errors = TRUE;
        }
      }
      else {
        // Articles with errors might have been deleted, and we must handle it.
        // But if "Titles autocomplete" is active, then it will be handled by
        // the titles-auto-update in the cron-function:
        // _os2web_borger_dk_titles_cronbatch().
        if (!$titles_autocomplete) {
          // Try to get this one article, to see if it still exists.
          $item = _os2web_borger_dk_GetArticleByID($external_id, $wsdl);
          if (!empty($item['error']) && $item['error'] == 1) {
            if (!empty($item['error_type']) && ($item['error_type'] == 'not_found')) {
              // $deleted_items[$nid] = $item;
              $deleted_ids[] = $nid;
            }
            else {
              $error_items[$nid] = $item;
            }
          }
        }
      }
    }
  }

  // Next we update/queue the articles that should be deleted.
  // Deleted_ids will only contain elements
  // if "Titles autocomplete" is inactive.
  if (!empty($deleted_ids)) {
    $sql = "UPDATE {os2web_borger_dk_article} SET external_status = -2 WHERE nid IN (:nids)";
    $nid_list = implode(',', $deleted_ids);
    db_query($sql, array(':updated' => $this_run, ':nids' => $nid_list));
  }

  // Then we log the errors that occured but we could not handle.
  if (!empty($error_items)) {
    foreach ($error_items as $nid => $error) {
      $msg = 'Borger.dk webservice returned an error for nid=%nid, external_id=%eid. Error code: %ecode. Error string: %estring';
      watchdog(
        'OS2web Borger.dk',
        $msg,
        $variables = array(
          '%nid' => $nid,
          '%eid' => $error['external_id'],
          '%ecode' => $error['error_code'],
          '%estring' => $error['error_string'],
        )
      );
    }
  }

  // Now we must update the "last_updated" variable.
  // But only if no errors were encountered.
  if (!$any_webservice_errors) {
    variable_set('os2web_borger_dk_last_update', $this_run);
    $updated_at = date('Y-m-d\TH\:i\:s', $this_run);
    $msg = 'All Borger.dk webservice articles have been updated succesfully at: %success';
    watchdog('OS2web Borger.dk', $msg, $variables = array('%success' => $updated_at));
  }
  else {
    $should_have_been = date('Y-m-d\TH\:i\:s', $this_run);
    $msg = 'Borger.dk webservice threw errors while updating articles at: %runtime. Not all articles have been updated. Last succesful automated update was at: %success';
    watchdog(
      'OS2web Borger.dk',
      $msg,
      $variables = array(
        '%runtime' => $should_have_been,
        '%success' => $updated_after,
      )
    );
  }
}

/**
 * Function _os2web_borger_dk_titles_cronbatch().
 */
function _os2web_borger_dk_titles_cronbatch($first_run = FALSE) {
  $borger_dk_menus_import = variable_get('os2web_borger_dk_menus_import', FALSE);
  $titles_availlable = array();
  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  $titles_availlable = _os2web_borger_dk_GetAllArticles($wsdl);

  // We must update the table of Borger.dk Article titles.
  // And to do that we must know what is already there, so that we can mark
  // un-listed titles for deletion.
  $titles_result = db_query('SELECT `ArticleID`, `ArticleStatus`, `LastUpdated` FROM {os2web_borger_dk_article_titles} WHERE `ArticleStatus` >= 0');
  $known_ids = array();
  foreach ($titles_result as $item) {
    $aid = $item->ArticleID;
    $known_ids[$aid] = array('ArticleStatus' => $item->ArticleStatus, 'LastUpdated' => $item->LastUpdated);
  }

  foreach ($titles_availlable as $id => $item) {
    $aid = $item['ArticleID'];
    // Check the known status (if any).
    if (isset($known_ids[$aid])) {
      // Before we update we check if it has been changed.
      $updated = strtotime($item['LastUpdated']);
      if ($updated > $known_ids[$aid]['LastUpdated']) {
        // We know about this article and we update the DB-entry
        // because the content has changed since we updated it last.
        db_update('os2web_borger_dk_article_titles')
            ->fields(array(
              'ArticleTitle' => $item['ArticleTitle'],
              'ArticleUrl' => $item['ArticleUrl'],
              'LastUpdated' => $updated,
              'FORMFields' => $item['FORMFields'],
            ))
            ->condition('ArticleID', $aid, '=')
            ->execute();
      }
      // We remove this item from the list of known ID's so that we can
      // find out if all the known ID's were found in the list.
      unset($known_ids[$aid]);
    }
    else {
      // This is a new article-title and we must insert it into DB.
      db_insert('os2web_borger_dk_article_titles')
          ->fields(array(
            'ArticleID' => $aid,
            'ArticleTitle' => $item['ArticleTitle'],
            'ArticleUrl' => $item['ArticleUrl'],
            'LastUpdated' => strtotime($item['LastUpdated']),
            'PublishingDate' => strtotime($item['PublishingDate']),
            'FORMFields' => $item['FORMFields'],
          ))
          ->execute();
    }
  }

  // NB: If this is run for the first time we should do an early exit.
  // No need to look for data to delete when no data exists.
  if ($first_run) {
    // Calling functions should never set this. Only called from hook_install.
    return;
  }

  // Now we handle the known_ids that has not been found in the article-list.
  if (!empty($known_ids)) {
    // We keep the titles-list updated, and because this is used primarily
    // to autocomplete titles on import we MUST keep it up to date, and can
    // not have "non-availlable" article titles "ready for import"!
    $aid_list = implode(',', array_keys($known_ids));
    $sql = "UPDATE {os2web_borger_dk_article_titles} SET `ArticleStatus` = -1 WHERE `ArticleID` IN (:aids)";
    db_query($sql, array(':aids' => $aid_list));

    // We create a queue for handling the many SoapClient->request's needed
    // for examinig if all unknown articles has been deleted.
    $queue = DrupalQueue::get('os2web_borger_dk_check_status_queue');

    $sql = 'SELECT `nid`, `external_id` FROM {os2web_borger_dk_article} WHERE `external_id` IN (:aids)';
    $result = db_query($sql, array(':aids' => $aid_list));

    // Step through the known_ids that has not been found.
    foreach ($result as $item) {
      $qitem = array('nid' => $item->nid, 'external_id' => $item->external_id);
      $queue->createItem($qitem);
      $log .= '=> Item: ' . print_r($qitem, TRUE) . "\n";
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function os2web_borger_dk_cron_queue_info() {
  $queues = array();
  $queues['os2web_borger_dk_delete_queue'] = array(
    // Function to call for each item.
    'worker callback' => '_os2web_borger_dk_delete_queue_callback',
    // Seconds to spend working on the queue.
    'time' => 20,
  );
  $queues['os2web_borger_dk_check_status_queue'] = array(
    // Function to call for each item.
    'worker callback' => '_os2web_borger_dk_status_check_queue_callback',
    // Seconds to spend working on the queue.
    'time' => 60,
  );

  return $queues;
}

/**
 * Function _os2web_borger_dk_status_check_queue_callback().
 */
function _os2web_borger_dk_status_check_queue_callback($data) {
  // Uses SoapClient->request GetArticleByID to check the
  // status of a Borger.dk Article with the Borger.dk-WebService.
  if (!isset($data['nid']) || !isset($data['external_id'])) {
    return;
  }

  $wsdl = variable_get('os2web_borger_dk_webservice', 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl');
  // Try to get this one article, to see if it still exists.
  $item = _os2web_borger_dk_GetArticleByID($data['external_id'], $wsdl);
  if (!empty($item['error']) && $item['error'] == 1) {
    if (!empty($item['error_type']) && ($item['error_type'] == 'not_found')) {
      // Not found articles are marked for deletion,
      // which is handled by another queue.
      $sql = "UPDATE {os2web_borger_dk_article} SET `external_status` = -2 WHERE `nid` = :nid";
      db_query($sql, array(':nid' => $data['nid']));
    }
    else {
      $msg = 'Borger.dk webservice returned an error for an imported article with id=%aid. ';
      $msg .= 'The error-struck article can be found here: %alink. ';
      $msg .= 'Error code: %ecode. Error string: %estring';
      watchdog(
        'OS2web Borger.dk',
        $msg,
        $variables = array(
          '%aid' => $data['external_id'],
          '%alink' => l(t('node/') . $data['nid']),
          '%ecode' => $item['error_code'],
          '%estring' => $item['error_string'],
        )
      );
    }
  }
  elseif (!isset($item['Exceptions'])) {
    // Well - NO ERRORS AND NO EXCEPTIONS - WHATS UP:
    // We un-mark this title, and let it point back to the borger_dk_article.
    $sql = "UPDATE {os2web_borger_dk_article_titles} SET `ArticleStatus` = :nid WHERE `ArticleID` = :aid";
    db_query($sql, array(':nid' => $data['nid'], ':aid' => $data['external_id']));
  }
}

/**
 * Function _os2web_borger_dk_delete_queue_callback().
 */
function _os2web_borger_dk_delete_queue_callback($data) {
  // This function loads a node with node_load, sets the status
  // to un-published, writes a log-message,
  // and stores it as a new revision.
  // Each data-element point to an article that should be deleted / unpublished.
  // First we load the current node.
  $node = node_load($data['nid']);
  // Then we put our update into a new revision for easy re-publishing.
  $node->revision = 1;
  // And we make it un-published.
  $node->status = 0;
  // We also insert a log-message that explains our actions.
  $node->log = t('Un-publishing article because it has been deleted at Borger.dk. This is an un-published copy of the revision from %date.', array(
    '%date' => format_date($node->revision_timestamp)));
  // And we mark the "external-link-table-item" as deleted (status = -1).
  $node->os2web_borger_dk_article['external_status'] = -1;
  // Finally we store the new revision.
  node_save($node);

  $msg = 'Cronjob has un-published the article node/%nid because is has been deleted at Borger.dk';
  watchdog('OS2web Borger.dk', $msg, $variables = array('%nid' => $node->nid));
}

/**
 * Function _os2web_borger_dk_update_node_content().
 */
function _os2web_borger_dk_update_node_content($nid, $article) {
  if (!empty($article['Exceptions']) || !empty($article['error'])) {
    return;
  }
  // First we load the corresponding node.
  $node = node_load($nid, NULL, TRUE);

  // And we update all the node-fields with the article-values.
  $node->title = $article['title'];

  $body = '';
  foreach ($article['kernetekst'] as $div => $content) {
    $body .= $content . "\n";
  }

  $node->title = (!empty($article['title'])) ? $article['title'] : '';

  $node->body['und'][0]['value'] = $body;
  $node->body['und'][0]['safe_value'] = $body;
  $node->body['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

  $node->field_os2web_borger_dk_byline['und'][0]['value'] = (!empty($article['byline'])) ? $article['byline'] : '';
  $node->field_os2web_borger_dk_byline['und'][0]['safe_value'] = (!empty($article['byline'])) ? $article['byline'] : '';
  $node->field_os2web_borger_dk_byline['und'][0]['format'] = BORGERDK_TEXT_FORMAT_PLAIN;

  $node->field_os2web_borger_dk_header['und'][0]['value'] = (!empty($article['header'])) ? $article['header'] : '';
  $node->field_os2web_borger_dk_header['und'][0]['safe_value'] = (!empty($article['header'])) ? $article['header'] : '';
  $node->field_os2web_borger_dk_header['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

  $node->field_os2web_borger_dk_selfservi['und'][0]['value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
  $node->field_os2web_borger_dk_selfservi['und'][0]['safe_value'] = (!empty($article['selvbetjeningslinks'])) ? $article['selvbetjeningslinks'] : '';
  $node->field_os2web_borger_dk_selfservi['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

  $node->field_os2web_borger_dk_recommend['und'][0]['value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';
  $node->field_os2web_borger_dk_recommend['und'][0]['safe_value'] = (!empty($article['anbefaler'])) ? $article['anbefaler'] : '';
  $node->field_os2web_borger_dk_recommend['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

  $node->field_os2web_borger_dk_legislati['und'][0]['value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
  $node->field_os2web_borger_dk_legislati['und'][0]['safe_value'] = (!empty($article['lovgivning'])) ? $article['lovgivning'] : '';
  $node->field_os2web_borger_dk_legislati['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

  $node->field_os2web_borger_dk_shortlist['und'][0]['value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
  $node->field_os2web_borger_dk_shortlist['und'][0]['safe_value'] = (!empty($article['huskeliste'])) ? $article['huskeliste'] : '';
  $node->field_os2web_borger_dk_shortlist['und'][0]['format'] = BORGERDK_TEXT_FORMAT_HTML;

  // Some fields from borger_dk_article can not be syncronized nor changed here.
  $node->os2web_borger_dk_article['external_id'] = $article['external_id'];
  $node->os2web_borger_dk_article['external_url'] = $article['external_url'];
  $node->os2web_borger_dk_article['published_date'] = strtotime($article['published_date']);
  $node->os2web_borger_dk_article['last_updated'] = strtotime($article['last_updated']);

  node_save($node);
  db_update('os2web_borger_dk_article')
      ->fields(array('last_updated' => strtotime($article['last_updated'])))
      ->condition('nid', $nid, '=')
      ->execute();
}

/**
 * Function _os2web_borger_dk_GetAllArticles().
 */
function _os2web_borger_dk_GetAllArticles($wsdl = 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl') {
  // This function uses the Borger.dk Webservice
  // GetAllArticles in order to fetch a list of
  // availlable articles (by title).
  $errors = array();
  // Then we can start using a new soap-client to
  // find the article-ID from the Borger.dk-URL.
  $client = new SoapClient($wsdl, array('exceptions' => 0));
  // First we make sure to keep requests/minute within given limits.
  _os2web_borger_dk_check_webservice_constraints();
  // Then we execute our webservice-request.
  $result_list = $client->GetAllArticles();
  if (is_soap_fault($result_list)) {
    $errors = _os2web_borger_dk_translate_soap_fault('GetAllArticles', $result_list->faultcode, $result_list->faultstring);
    return $errors;
  }

  $article_items = array();
  // Then we get the result-list from the specified webservice.
  $article_list = $result_list->GetAllArticlesResult;
  if (is_soap_fault($article_list)) {
    $errors = _os2web_borger_dk_translate_soap_fault('GetAllArticlesResult', $article_list->faultcode, $article_list->faultstring);

    return $errors;
  }
  else {
    // Now we step through all the fetched articles and convert them to arrays
    // of wanted field-sets.
    // NB!!: The webservice places ONE found article directly in the response.
    // But TWO found articles are placed in an array.
    if (is_array($article_list->ArticleDescription)) {
      foreach ($article_list->ArticleDescription as $id => $article) {
        $new_item = _os2web_borger_dk_parse_borgerdk_article_desc($article);
        $article_items[] = $new_item;
      }
    }
    else {
      foreach ($article_list as $id => $article) {
        $new_item = _os2web_borger_dk_parse_borgerdk_article_desc($article);
        $article_items[] = $new_item;
      }
    }
  }

  return $article_items;
}

/**
 * Function _os2web_borger_dk_GetArticlesByIDs().
 */
function _os2web_borger_dk_GetArticlesByIDs($borgerdk_ids = NULL, $updated_after = NULL, $wsdl = 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl') {
  // This function uses the Borger.dk WebService GetArticlesByIDs
  // in order to fetch a list of Borger.dk-articles by article-IDs
  // and an "updateAfter"-datestamp.
  // We must have an array of items to fetch either specified by a list of
  // articleIDs or specified by an updatedAfter timestamp.
  if (empty($borgerdk_ids) && empty($updated_after)) {
    return array();
  }

  $errors = array();
  // Then we can start using a new soap-client to find
  // the article-ID from the Borger.dk-URL.
  $client = new SoapClient($wsdl, array('exceptions' => 0));
  if (empty($updated_after) && !empty($borgerdk_ids)) {
    // We have a specified list of articles to fetch.
    // First we make sure to keep requests/minute within given limits.
    _os2web_borger_dk_check_webservice_constraints();
    // Then we execute our webservice-request.
    $result_list = $client->GetArticlesByIDs(array('articleIDs' => $borgerdk_ids));
    if (is_soap_fault($result_list)) {
      $errors = _os2web_borger_dk_translate_soap_fault($borgerdk_ids, $result_list->faultcode, $result_list->faultstring);

      return $errors;
    }
  }
  elseif (!empty($updated_after) && empty($borgerdk_ids)) {
    // First we make sure to keep requests/minute within given limits.
    _os2web_borger_dk_check_webservice_constraints();
    // Then we execute our webservice-request.
    // We have a specified date, and want all articles that have been
    // updated since the given date.
    $result_list = $client->GetArticlesByIDs(array('updatedAfter' => $updated_after));
    if (is_soap_fault($result_list)) {
      $errors = _os2web_borger_dk_translate_soap_fault(array('updatedAfter' => $updated_after), $result_list->faultcode, $result_list->faultstring);

      return $errors;
    }
  }
  elseif (!empty($updated_after) && !empty($borgerdk_ids)) {
    // First we make sure to keep requests/minute within given limits.
    _os2web_borger_dk_check_webservice_constraints();
    // Then we execute our webservice-request.
    // We have a specified date, and a specified list of article-IDs. We
    // want all articles from that list that has also been updated since
    // the given date.
    $result_list = $client->GetArticlesByIDs(
      array(
        'articleIDs' => $borgerdk_ids,
        'updatedAfter' => $updated_after,
      )
    );
    if (is_soap_fault($result_list)) {
      $errors = _os2web_borger_dk_translate_soap_fault(
        array(
          'articleIDs' => $borgerdk_ids,
          'updatedAfter' => $updated_after,
        ),
        $result_list->faultcode,
        $result_list->faultstring
      );

      return $errors;
    }
  }

  $article_items = array();
  // Then we get the result-list from the specified webservice.
  $article_list = $result_list->GetArticlesByIDsResult;
  if (is_soap_fault($article_list)) {
    $errors = _os2web_borger_dk_translate_soap_fault('GetArticlesByIDsResult', $article_list->faultcode, $article_list->faultstring);

    return $errors;
  }
  else {
    // Now we step through all the fetched articles and convert them to arrays
    // of wanted field-sets.
    $found_ids = array();
    // NB!!: The webservice places ONE found article directly in the response.
    // But TWO found articles are placed in an array.
    if (is_array($article_list->Article)) {
      foreach ($article_list->Article as $id => $article) {
        $new_item = _os2web_borger_dk_parse_borgerdk_article($article);
        $found_ids[$new_item['external_id']] = 1;
        $article_items[] = $new_item;
      }
    }
    else {
      foreach ($article_list as $id => $article) {
        $new_item = _os2web_borger_dk_parse_borgerdk_article($article);
        $found_ids[$new_item['external_id']] = 1;
        $article_items[] = $new_item;
      }
    }
    // Now we check if all the wanted articles was found.
    if (!empty($borgerdk_ids)) {
      foreach ($borgerdk_ids as $id) {
        if (empty($found_ids[$id])) {
          $article_items[] = array(
            'external_id' => $id,
            'no_updates' => 1,
          );
        }
      }
    }
  }

  return $article_items;
}

/**
 * Function _os2web_borger_dk_GetArticleByUrl().
 */
function _os2web_borger_dk_GetArticleByUrl($borgerdk_url, $wsdl = 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl') {
  // This function uses the Borger.dk WebServices
  // GetArticleIDByUrl and GetArticleByID in order
  // to fetch a Borger.dk-article by its URL.
  $error = array();
  // The URL of the Borger.dk-article to get must
  // be given as argument.
  if (empty($borgerdk_url)) {
    return $error;
  }

  // We start by using a soap-client to find the article-ID
  // from the Borger.dk-URL.
  $client = new SoapClient($wsdl, array('exceptions' => 0));
  // First we make sure to keep requests/minute within given limits.
  _os2web_borger_dk_check_webservice_constraints();
  // Then we execute our webservice-request.
  $result_id = $client->GetArticleIDByUrl(array('url' => $borgerdk_url));

  if (is_soap_fault($result_id)) {
    // An error was encountered and we examine it more closely.
    $error = _os2web_borger_dk_translate_soap_fault($borgerdk_url, $result_id->faultcode, $result_id->faultstring);

    return $error;
  }
  else {
    // If no errors was encountered we fetch the resulting ArticleID.
    $id2get = $result_id->GetArticleIDByUrlResult->ArticleID;

    // Then we use the article-ID to fetch the actual Borger.dk-article.
    $article = _os2web_borger_dk_GetArticleByID($id2get);
  }

  return $article;
}

/**
 * Function _os2web_borger_dk_GetArticleByID().
 */
function _os2web_borger_dk_GetArticleByID($borgerdk_id, $wsdl = 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl', $use_constraints = TRUE) {
  // Check the admin setting.
  $admin_municipality = variable_get('os2web_borger_dk_municipality_active');
  // This function uses the Borger.dk WebService
  // GetArticleByID in order to fetch a Borger.dk-article
  // by its article-ID.
  $error = array();
  // The ID of the Borger.dk-article to get must be given as argument.
  if (empty($borgerdk_id)) {
    return $error;
  }

  // We use a soap-client to fetch the specified article from Borger.dk.
  $client = new SoapClient($wsdl, array('exceptions' => 0));

  // Then we execute our webservice-request.
  $array_get_article = array('articleID' => $borgerdk_id);
  // If municipality is set, then get article by id and municipality code.
  if ($admin_municipality != 0) {
    $array_get_article['municipalityCode'] = $admin_municipality;
  }
  $result_article = $client->GetArticleByID($array_get_article);
  if (is_soap_fault($result_article)) {
    // An error was encountered and we examine it more closely.
    $error = _os2web_borger_dk_translate_soap_fault($borgerdk_id, $result_article->faultcode, $result_article->faultstring);

    return $error;
  }
  else {
    $article = $result_article->GetArticleByIDResult;
    if (is_soap_fault($article)) {
      // An error was encountered and we examine it more closely.
      $error = _os2web_borger_dk_translate_soap_fault($borgerdk_id, $article->faultcode, $article->faultstring);
      return $error;
    }
  }

  return _os2web_borger_dk_parse_borgerdk_article($article);
}

/**
 * Function _os2web_borger_dk_GetAllSites().
 *
 * This function uses the Borger.dk Webservice GetAllSites
 * in order to fetch the menu-structure from Borger.dk
 */
function _os2web_borger_dk_GetAllSites($wsdl = 'https://www.borger.dk/_vti_bin/borger/ArticleExport.svc?wsdl', $use_constraints = TRUE) {
  $errors = array();
  $menu_items = array();

  // Then we can start using a new soap-client to find the article-ID
  // from the Borger.dk-URL.
  $client = new SoapClient($wsdl, array('exceptions' => 0));
  // First we make sure to keep requests/minute within given limits.
  if ($use_constraints) {
    _os2web_borger_dk_check_webservice_constraints();
  }
  // Then we execute our webservice-request.
  $result_list = $client->GetAllSites();
  if (is_soap_fault($result_list)) {
    $errors = _os2web_borger_dk_articles_translate_soap_fault('GetAllSites', $result_list->faultcode, $result_list->faultstring);

    return $errors;
  }

  $menu_items = array();
  // Then we get the result-list from the specified webservice.
  $menu_list = $result_list->GetAllSitesResult;
  if (is_soap_fault($menu_list)) {
    $errors = _os2web_borger_dk_articles_translate_soap_fault('GetAllSitesResult', $menu_list->faultcode, $menu_list->faultstring);

    return $errors;
  }
  else {
    // Now we step through all the fetched menu-items and
    // convert them to arrays of wanted field-sets.
    if (is_array($menu_list->Site)) {
      foreach ($menu_list->Site as $id => $menu_item) {
        $new_item = _os2web_borger_dk_parse_borgerdk_menu_item($menu_item);
        $menu_items[] = $new_item;
      }
    }
    else {
      $new_item = _os2web_borger_dk_parse_borgerdk_menu_item($menu_list->Site);
      $menu_items[] = $new_item;
    }
  }

  return $menu_items;
}
/**
 * Function _os2web_borger_dk_tag_borger_dk_articles().
 */
function _os2web_borger_dk_tag_borger_dk_articles($menu = array(), $update_items = array()) {
  $not_tagged = array();

  foreach ($menu as $id => $item) {
    // First we check if this is an imported article or not.
    $tid = (isset($item['tid'])) ? $item['tid'] : FALSE;
    $ptid = (isset($item['ptid'])) ? $item['ptid'] : FALSE;
    if ($tid) {
      if (isset($item['Links']) && is_array($item['Links'])) {
        $term = taxonomy_term_load($tid);
        if ($term) {
          // The term was found and we tag all linked articles.
          foreach ($item['Links'] as $lid => $litem) {
            // We only tag imported articles.
            $aid = (isset($item['ArticleID'])) ? $item['ArticleID'] : FALSE;
            if ($aid && isset($update_items[$aid])) {
              $node = node_load($update_items[$aid]);
              $node->field_os2web_borger_dk_formterm['und'][$tid] = (array) $term;

              node_save($node);
            }
          }
        }
        else {
          // Could not find the correct term.
          foreach ($item['Links'] as $lid => $litem) {
            $not_tagged[$lid] = $litem;
          }
        }
      }
    }
    // Now we go recursive on any and all child-elements.
    if (isset($item['nl']) && is_array($item['nl'])) {
      $errors = _os2web_borger_dk_tag_borger_dk_articles($item['nl'], $update_items);
      if (!empty($errors)) {
        $not_tagged = array_merge($not_tagged, $errors);
      }
    }
  }

  return $not_tagged;
}

/**
 * Function _os2web_borger_dk_parse_borgerdk_menu_item().
 *
 * This function parses a Borger.dk-MenuItemDescription and extracts all
 * the field values we want for our Borger.dk-menu-structure.
 */
function _os2web_borger_dk_parse_borgerdk_menu_item($menu_item) {
  // First we extract the directly accessible fields
  // from the ArticleDescription.
  $pid = (isset($menu_item->ParentID)) ? $menu_item->ParentID : '';
  $borgerdk_menu = array(
    'ParentID' => $pid,
    'SiteID' => $menu_item->SiteID,
    'SiteName' => html_entity_decode($menu_item->SiteName, ENT_NOQUOTES, 'UTF-8'),
    'SiteTitle' => $menu_item->SiteTitle,
  );

  return $borgerdk_menu;
}

/**
 * Function _os2web_borger_dk_parse_borgerdk_article().
 */
function _os2web_borger_dk_parse_borgerdk_article($article) {
  // This function can parse a Borger.dk XML-article and extract
  // all the field values we want for our Drupal-nodes.
  $borgerdk_article = array(
    'title' => html_entity_decode($article->ArticleTitle, ENT_NOQUOTES, 'UTF-8'),
    'header' => html_entity_decode($article->ArticleHeader, ENT_NOQUOTES, 'UTF-8'),
    'external_id' => $article->ArticleID,
    'external_url' => $article->ArticleUrl,
    'last_updated' => $article->LastUpdated,
    'published_date' => $article->PublishingDate,
  );

  // We need to parse (using simpleXML) the content in order to f
  // ind embedded field-values:
  // Based on example from:
  // http://stackoverflow.com/questions/66358
  // 49/can-simplexml-be-used-to-rifle-through-html
  $doc = new DOMDocument('1.0', 'UTF-8');
  $doc->strictErrorChecking = FALSE;
  // yx@bellcom.dk: disable the Warning:
  // DOMDocument::loadHTML(): ID faktaboks already defined.

  @$doc->loadHTML('<?xml encoding="UTF-8">' . $article->Content);
  $xml = simplexml_import_dom($doc);

  $links_xml = _os2web_borger_dk_get_xml_by_query($xml, "//*[@id='selvbetjeningslinks']");
  $borgerdk_article['selvbetjeningslinks'] = _os2web_borger_dk_create_general_html($links_xml);

  $lov_xml = _os2web_borger_dk_get_xml_by_query($xml, "//*[@id='lovgivning']");
  $borgerdk_article['lovgivning'] = _os2web_borger_dk_create_general_html($lov_xml);

  $borgerdk_article['kernetekst'] = _os2web_borger_dk_create_kernetekst_html($xml);


  $byline_xml = _os2web_borger_dk_get_xml_by_query($xml, "//*[@id='byline']");
  $byline = _os2web_borger_dk_create_general_html($byline_xml->div);
  if (FALSE !== strpos($byline, '<div>Skrevet af')) {
    $byline = trim($byline);
    $new_byline = preg_replace("/<div>(Skrevet af .+?)<\/div>/i", "$1", $byline, 1);
    if (0 < strlen($new_byline)) {
      // We only overwrite the byline if we found some replacement text.
      $byline = $new_byline;
    }
  }
  $borgerdk_article['byline'] = $byline;

  $anbefaler_xml = _os2web_borger_dk_get_xml_by_query($xml, "//*[@id='anbefaler']");
  $borgerdk_article['anbefaler'] = _os2web_borger_dk_create_general_html($anbefaler_xml);

  $huskeliste_xml = _os2web_borger_dk_get_xml_by_query($xml, "//*[@id='huskeliste']");
  $borgerdk_article['huskeliste'] = _os2web_borger_dk_create_general_html($huskeliste_xml);

  $lovgivning_xml = _os2web_borger_dk_get_xml_by_query($xml, "//*[@id='lovgivning']");
  $borgerdk_article['lovgivning'] = _os2web_borger_dk_create_general_html($lovgivning_xml);


  // yx@bellcom.dk: add 'faktaboks' case since Borger.dk updated,
  // some of selvbetjeningslinks contains ID as 'faktaboks'
  // instead of 'selvbetjeningslinks'.
  if (!isset($borgerdk_article['selvbetjeningslinks'])) {

    foreach ($xml->body->div as $div) {
      if ($div->attributes()->id == 'faktaboks') {
        $text = _os2web_borger_dk_create_html_from_xml($div->h2);

        // &#8203;  str string from borger.dk
        $text = str_replace('&#8203;', '', $text);
        preg_match("/Selvbetjening/", $text, $text_2);

        if (isset($text_2[0])) {
          $borgerdk_article['selvbetjeningslinks'] = _os2web_borger_dk_create_general_html($div);
        }
      }
    }
  }

  // Finally we check if the article contained embedded errors.
  $dom_html = $doc->saveHTML();
  if (strpos($dom_html, 'Exception has been thrown by the target of an invocation')) {
    $borgerdk_article['Exceptions'] = 1;
  }
  return $borgerdk_article;
}

/**
 * Returns an XML object of the inner-HTML contained in the borger.dk XML response.
 */
function _os2web_borger_dk_get_xml_by_query($xml, $xpath_query) {

  $html = '';
  $item = $xml->xpath($xpath_query);

  if (count($item) > 0) {

    // Turn xpath query result into HTML
    while(list(,$node) = each($item)) {
      $html .= $node->asXML();
    }

    // Test if more than one element was returned. This can happen, since sometimes there are
    // several elements with the same ID in the borger.dk HTML.
    if (count($item) > 1) {
      // Elements were continated. Log this to dblog.

      watchdog('OS2Web Borger.dk', 'Dual id\'s in structure when using Xpath query "'. $xpath_query .'"" Elements were concatinated');
    }
  }
  else {
    // Noting returned by query. $html variable must contain an element in order for
    // proceeding code not to error, so we fill in a dummy <span>
    $html .= '<span></span>';
  }

  $new_dom = new DOMDocument('1.0', 'UTF-8');
  $new_dom->strictErrorChecking = FALSE;
  @$new_dom->loadHTML('<?xml encoding="UTF-8">' . $html);
  $xml = simplexml_import_dom($new_dom);
  return $xml;
}

/**
 * Function _os2web_borger_dk_parse_borgerdk_article_desc().
 */
function _os2web_borger_dk_parse_borgerdk_article_desc($article) {
  // This function parses a Borger.dk-ArticleDescription and
  // extracts all the field values we want for our list of
  // titles (for autocompletion etc).
  // First we extract the directly accessible fields from the
  // ArticleDescription.
  $borgerdk_title = array(
    'ArticleID' => $article->ArticleID,
    'ArticleTitle' => html_entity_decode($article->ArticleTitle, ENT_NOQUOTES, 'UTF-8'),
    'ArticleUrl' => $article->ArticleUrl,
    'LastUpdated' => $article->LastUpdated,
    'PublishingDate' => $article->PublishingDate,
  );

  // Then we find all FORM-elements and create a new serialized array.
  $form_elements = array(
    'FormServiceAreas' => (isset($article->FormServiceAreas)) ? $article->FormServiceAreas : NULL,
    'FormTaskAreas' => (isset($article->FormTaskAreas)) ? $article->FormTaskAreas : NULL,
  );

  $form_tasks = array();
  $article_formtasks = $article->FormTasks;
  if ((isset($article_formtasks->FormTask)) && is_array($article_formtasks->FormTask)) {
    foreach ($article_formtasks->FormTask as $id => $formtask) {
      $task = array(
        'FormTaskName' => $formtask->FormTaskName,
        'FormTaskNumber' => $formtask->FormTaskNumber,
      );
      $form_tasks[] = $task;
    }
  }
  else {
    if (isset($article_formtasks->FormTask)) {
      $single_task = $article_formtasks->FormTask;
      $task = array(
        'FormTaskName' => $single_task->FormTaskName,
        'FormTaskNumber' => $single_task->FormTaskNumber,
      );
      $form_tasks[] = $task;
    }
  }
  // Then we add the found FORM-elements to the return array.
  $form_elements['FormTasks'] = $form_tasks;
  $borgerdk_title['FORMFields'] = serialize($form_elements);

  return $borgerdk_title;
}

/**
 * Function _os2web_borger_dk_create_kernetekst_html().
 */
function _os2web_borger_dk_create_kernetekst_html($xml) {
  // This function steps through the so called microArticle's
  // and converts plus concatenates each element as HTML.
  $microarticles = _os2web_borger_dk_get_xml_by_query($xml, "//*[starts-with(@id, 'microArticle')]");

  $output = array();
  $counter = 1;
  $baseclass = 'mArticle';
  foreach ($microarticles->body->div as $microarticle) {
    $div_attr = $microarticle->attributes()->id;
    $search = '<div id="' . $div_attr . '">';
    $replace = '<div class="microArticle" id="' . $div_attr . '">';
    $html = _os2web_borger_dk_create_html_from_xml($microarticle, $search, $replace);

    // We replace the first <h2>-tag with <h2 class="mArticleX">.
    $pattern = '/<h2>/';
    $replacement = '<h2 class="mArticle" id="' . $baseclass . $counter . '">';
    $html = preg_replace($pattern, $replacement, $html, 1);

    // We replace the first <h3>-tag with <h2 class="mArticleX">.
    $pattern = '/<h3>/';
    $replacement = '<h2 class="mArticle" id="' . $baseclass . $counter . '">';
    $html = preg_replace($pattern, $replacement, $html, 1);

    // We replace the first </h3>-tag with </h2>.
    $pattern = '/<\/h3>/';
    $replacement = '</h2>';
    $html = preg_replace($pattern, $replacement, $html, 1);

    // And we replace the first <div>-tag with <div class="mArticleX">.
    $pattern = '/<div>/';
    $replacement = '<div class="' . $baseclass . $counter . ' mArticle">';
    $html = preg_replace($pattern, $replacement, $html, 1);

    $output["$div_attr"] = $html;

    // Then we update the counter for the next kernetekst-div.
    $counter += 1;
  }

  return $output;
}

/**
 * This function converts a list of XML elements to HTML.
 */
function _os2web_borger_dk_create_general_html($xml) {
  $output = '';

  // We convert each of the XML elements to HTML.
  foreach ($xml as $element) {
    // We use a general method to convert XML to HTML.
    $output .= _os2web_borger_dk_create_html_from_xml($element);
    $output .= "\n";
  }

  return $output;
}

/**
 * This function converts XML-entities to ordinary HTML.
 */
function _os2web_borger_dk_create_html_from_xml($xml, $search = NULL, $replace = NULL) {
  // DOMDocuments converts special characters to HTML-characters, and we
  // need to replace some of those back into danish letters. Also <br/>-tags
  // gets replaced with <br>-tags, and we need to convert those as well.
  $substitute = array(
    '<br>' => '<br />',
    '&aelig;' => '%C3%A6',
    '&Aelig;' => '%C3%86',
    '&AElig;' => '%C3%86',
    '&oslash;' => '%C3%B8',
    '&Oslash;' => '%C3%98',
    '&aring;'  => '%C3%A5',
    '&Aring;'  => '%C3%85',
    '&rsquo;' => '%26rsquo%3B',
    '&ndash;' => '%26ndash%3B',
    '&eacute;' => '%26eacute%3B',
  );
  // If the function is called with a special replacement-string we add
  // the search- and replace-strings to the default substitution array.
  if (!empty($search) && !empty($replace)) {
    $substitute[$search] = $replace;
  }

  // Then we convert the XML to HTML, and substitute special characters.
  $dom = new DOMDocument('1.0', 'UTF-8');
  $dom->loadXML($xml->asXML());
  $dom_html = $dom->saveHTML();
  $dom_html = strtr($dom_html, $substitute);
  $dom_html = urldecode($dom_html);

  return $dom_html;
}

/**
 * Function _os2web_borger_dk_translate_soap_fault().
 */
function _os2web_borger_dk_translate_soap_fault($borgerdk_id, $faultcode, $faultstring) {
  // This function is used to translate SoapClient-errors
  // from string-elements to an array of
  // "real"/"usable" error-information.
  $error = array(
    'error' => 1,
    'external_id' => $borgerdk_id,
    'error_code' => $faultcode,
    'error_string' => $faultstring,
  );

  // We set up an array of known SoapClient errors
  // array of: 'error_type' => '/regex-pattern to use/'.
  $known_errors = array(
    'not_found' => '/^No articles found with ids \'(\d*)\'/',
  );

  // Now we examine the faultstring more closely.
  if ($faultcode == "s:Client") {
    // Then we might know something about that error-type.
    foreach ($known_errors as $error_type => $error_text) {
      $matches = array();
      if (1 == preg_match($error_text, $faultstring, $matches)) {
        // We found a known error type.
        $error['error_type'] = $error_type;

        // Now lets see if there are known matches / digits to return.
        switch ($error_type) {
          case 'not_found':
            $error['not_found_id'] = $matches[1];
            break;

          default:
            break;
        }

        // Finally we break out of the loop for finding this error.
        break;
      }
    }
  }

  return $error;
}

/**
 * Function _os2web_borger_dk_check_webservice_constraints().
 *
 * Checking if the webservice constraints has been reached, and in that case
 * delaying the script.
 */
function _os2web_borger_dk_check_webservice_constraints() {
  $time = time();

  // We start of by getting the webservice request-limits.
  $webservice_request_limit = variable_get('os2web_borger_dk_webservice_request_limit', 100);
  $webservice_time_limit = variable_get('os2web_borger_dk_webservice_time_limit', 60);

  // And we keep track of the number of webservice-requests per timeperiod.
  $os2web_borger_dk_article_count_no = variable_get('os2web_borger_dk_webservice_request_counter', 0);
  $os2web_borger_dk_article_start_time = variable_get('os2web_borger_dk_webservice_time_counter', 0);

  // We restart the counters if the timer is too old.
  if ($os2web_borger_dk_article_start_time < ($time - $webservice_time_limit)) {
    $os2web_borger_dk_article_count_no = 0;
    $os2web_borger_dk_article_start_time = $time;
    variable_set('os2web_borger_dk_webservice_request_counter', $os2web_borger_dk_article_count_no);
    variable_set('os2web_borger_dk_webservice_time_counter', $os2web_borger_dk_article_start_time);
  }

  // Then we check if the limits has been reached, and it's time for a break.
  if (($webservice_time_limit >= ($time - $os2web_borger_dk_article_start_time)) &&
      ($webservice_request_limit <= $os2web_borger_dk_article_count_no)) {
    // We have reached the work-load limit of 100 items per minute, and must
    // take a small break or the webservice will stop answering us.
    sleep($webservice_time_limit - ($time - $os2web_borger_dk_article_start_time));

    // Then we reset/store the counters for limiting the webservice work-load.
    $os2web_borger_dk_article_count_no = 0;
    $os2web_borger_dk_article_start_time = time();
    variable_set('os2web_borger_dk_webservice_time_counter', $os2web_borger_dk_article_start_time);
  }

}

/**
 * Implements hook_os2web_help().
 */
function os2web_borger_dk_os2web_help($sections) {

  // Content types.
  $sections['contenttype'] = t('<p><b>Borger.dk Article:</b> Add
                               <a href="@url" target="_blank">borger.dk articles</a>
                               directly from borger.dk, and implement them in your sites structure.<br />
                               <i><a href="@borger" target="_blank">
                               See the advanced documentation for the borger.dk module</a>(.pdf)</i></p>',
                               array(
                                 '@url' => url('node/add/os2web-borger-dk-article'),
                                 '@borger' => file_create_url(
                                    drupal_get_path('module', 'os2web_borger_dk') . '/doc/Guide til OS2web borger.dk - articles.pdf'
                                 ),
                               )
                             );

  $sections['import'] = t('<p><b>Automatic import of Borger.dk articles:
                          </b><a href="@url" target="_blank">Configure automatic import and syncronization of articles located on Borger.dk</a>
                          <br />See an advanced guide for setting up an import here:
                          <a href="@import-guide" target="_blank">Borger.dk menu import.pdf</a>
                          (<i>Danish only</i>)</p>',
                          array(
                            '@url' => url('admin/config/os2web_borger_dk/settings'),
                            '@import-guide' => file_create_url(
                                drupal_get_path('module', 'os2web_borger_dk') . '/doc/Borger.dk menu import.pdf'
                            ),
                          )
                        );
  return $sections;

}

/**
 * Implements hook_help().
 */
function os2web_borger_dk_help($path, $arg) {
  switch ($path) {
    case 'admin/help#os2web_borger_dk':
      // TODO.
      return t('Missing documentation.');
  }
}
