<?php
/**
 * @file
 * Code for the OS2Web indholdstyper feature.
 */

include_once('os2web_base.features.inc');

/**
 * Implements hook_date_format_types().
 */
function os2web_base_date_format_types() {
  // Define the core date format types.
  return array(
    'os2web_base_date_only' => t('Date Only'),
  );
}
/**
 * Implements hook_date_formats().
 */
function os2web_base_date_formats() {
  return array(
    array(
      'type' => 'os2web_base_date_only',
      'format' => 'Y-m-d',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_os2web_help().
 */
function os2web_base_os2web_help($sections) {

  // Content types.
  $sections['contenttype'] = t('<p><b>Contentpage:</b> A <a href="@url" target="_blank">contentpage</a> is a regular CMS page, where you can show regular static content.</p>', array('@url' => url('node/add/os2web-base-contentpage')));
  $sections['contenttype'] .= t('<p><b>Gallery:</b> <a href="@url" target="_blank">Create a Gallery</a> to show a group of images together in an album.</p>', array('@url' => url('node/add/os2web-base-gallery')));
  $sections['contenttype'] .= t('<p><b>iFrame:</b> <a href="@url" target="_blank">Create an iFrame</a> to show a external article or page directly on your site as normal content .</p>', array('@url' => url('node/add/os2web-base-iframe')));
  $sections['contenttype'] .= t('<p><b>Video and Sound:</b> <a href="@url" target="_blank">Create a page with a video or a sound</a></p>', array('@url' => url('node/add/media')));
  if (module_exists('os2web_breaking_news')) {
    $sections['contenttype'] .= t('<p><b>Nyheder:</b> <a href="@url" target="_blank">Create a news story</a>. News stories are shown in the different news overviews. Promote a News story to get in at the top of every page on your site.</p>', array('@url' => url('node/add/os2web_base_news')));
  }
  else {
    $sections['contenttype'] .= t('<p><b>Nyheder:</b> <a href="@url" target="_blank">Create a news story</a>. News stories are shown in the different news overviews.</p>', array('@url' => url('node/add/os2web_base_news')));
  }
  $sections['contenttype'] .= t('<p><b>Image carrousell:</b> <a href="@url" target="_blank">Add an image</a> to be shown in the carrousell at the frontpages.<br />Promote the image to e.g. the fronpage or a portalfrontpage. The image can also be shown in a time interval. Define what the image should link to by entering an internal or external URL.</p>', array('@url' => url('node/add/os2web_base_rotating_image')));
  $sections['contenttype'] .= t('<p><b>Selfservicelinks (<i>Selvbetjeningslink</i>):</b> <a href="@url" target="_blank">Selfservicelinks</a> are links to functions on tour site. The links are shown in the boxes of selfservicelinks. Create a link to what <b>could</b> be a selfservice.</p>', array('@url' => url('node/add/os2web_base_selfservice_link')));

  return $sections;
}

/**
 * Implement hook_form_alter().
 */
function os2web_base_form_alter(&$form, $form_state, $form_id) {
  // Add a second submit button to node forms.
  if (isset($form['#node']) && ($form_id == $form['#node']->type . '_node_form')) {
     $form['top_actions'] = array(
        '#type' => 'actions',
        '#weight' => -10,
     );
     $form['top_actions']['top_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#weight' => -10,
        '#validate' => array('node_form_validate'),
        // Use default and an additional submit handler.
        '#submit' => array('node_form_submit'),
      );
  }
}

/**
 * Implements hook_cron().
 */
function os2web_base_cron() {
  // Register our own shutdown function.
  drupal_register_shutdown_function('_os2web_base_cron_shutdown');
}

/**
 * Shutdown function to register the timestamp into a public accesible file.
 */
function _os2web_base_cron_shutdown() {
  file_unmanaged_save_data(variable_get('cron_last'), 'public://os2web_cron_last', FILE_EXISTS_REPLACE);
}

/**
 * Implements hook_node_update().
 */
function os2web_base_node_update($node) {
  // Delete files from old node revisions. -->
  //
  // Wrap updated and original node.
  $wrapper = entity_metadata_wrapper('node', $node);
  $original_wrapper = entity_metadata_wrapper('node', $node->original);

  // Fetch all fields for the node type, and iterate over them. To get all
  // file references.
  $fields = field_info_instances('node', $node->type);
  foreach ($fields as $field => $field_data) {
    if (!isset($original_wrapper->{$field})) {
      continue;
    }
    $current_files = array();
    $original_files = array();
    // Get files that were attached to the original node (before update).
    foreach ($original_wrapper->{$field}->value() as $file) {
      if (is_array($file) && $file['fid']) {
        $original_files[] = $file['fid'];
      }
    }
    // Stop if there were no files previously attached.
    if (empty($original_files)) {
      continue;
    }
    // Get files currently attached to the node (after update).
    foreach ($wrapper->{$field}->value() as $file) {
      if (is_array($file) && $file['fid']) {
        $current_files[] = $file['fid'];
      }
    }
    // Delete files that were in the original node but were removed during
    // this update.
    $deleted_files = array_diff($original_files, $current_files);
    foreach ($deleted_files as $fid) {
      if ($file = file_load($fid)) {
        file_usage_delete($file, 'file', 'node', $node->nid);
        file_delete($file);
      }
    }
  }
  // <-- Delete files from old node revisions.
}
