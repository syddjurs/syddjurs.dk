<?php
/**
 * @file
 * Code for the Ofir job index integration feature.
 */

include_once 'os2web_ofir_job.features.inc';

/**
 * Implements hook_os2web_help().
 */
function os2web_ofir_job_os2web_help($sections) {

  $sections['list_of_content'] = t('<a href="#os2web_ofir_job">Ofir Job Importer</a><br />');

  // General about OS2web Service.
  $sections['os2web_ofir_job'] = t('<h2 id="os2web_ofir_job">Ofir Job Importer</h2>');

  // Module specific.
  $sections['os2web_ofir_job'] .= t('<p>Jobs are automatically imported from Ofir.dk/job.');

  // Importers.
  $sections['os2web_ofir_job'] .= t('<p><b id=="os2web_ofir_job">Job Importer:</b> Initialize the importer for Ofir Jobs at <a href="@url">the import page.</a></p>', array('@url' => 'import/os2web_ofir_job_feeds_import'));

  // Add content to the genneral listings.
  $sections['contenttype'] = t('<p><b>Ofir Job:</b> Jobs are automatically imported from Ofir.dk/job. See an overview over all current jobs at <a href="@url" target="_blank">/job</a>. See more about the <a href="#os2web_ofir_job">Job Importer</a></p>', array('@url' => url('job')));
  $sections['import'] = t('<p><b id=="os2web_ofir_job">Job Importer:</b> Initialize the importer for Ofir Jobs at <a href="@url">the import page.</a></p>', array('@url' => 'import/os2web_ofir_job_feeds_import'));

  return $sections;
}

/**
 * Implements hook_menu().
 */
function os2web_ofir_job_menu() {
  $items = array();
  $items['admin/config/os2web_ofir_job'] = array(
    'title' => 'OS2web ofir job settings',
    'description' => 'General settings for ofir job import, fx, modify WSDL and syncronization time',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/os2web_ofir_job/settings'] = array(
    'title' => 'OS2web ofir job Settings',
    'description' => 'General settings for the OS2Web ofir job',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2web_ofir_job_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function os2web_ofir_job_settings_form() {
  $form['os2web_ofir_job_webservice'] = array(
    '#type' => 'textfield',
    '#title' => t('Ofir job Webservice URL'),
    '#default_value' => variable_get('os2web_ofir_job_webservice', 'https://syddjurs.emply.net/api.asmx?WSDL'),
    '#size' => 100,
    '#maxlength' => 200,
  );
  $form['os2web_ofir_job_apiKey'] = array(
    '#type' => 'textfield',
    '#title' => t('Ofir job API-nøgle'),
    '#default_value' => variable_get('os2web_ofir_job_apiKey', '4dccbf6d-5e82-4303-89bd-0322ce8f2c30'),
    '#size' => 100,
    '#maxlength' => 130,
  );
  $form['os2web_ofir_job_mediaId'] = array(
    '#type' => 'textfield',
    '#title' => t('Ofir job Medie ID'),
    '#default_value' => variable_get('os2web_ofir_job_mediaId', '537a7324-00fa-42c1-822d-d0256092ddb9'),
    '#size' => 100,
    '#maxlength' => 130,
  );
  $import_options = array(
    '1' => t('Hver time'),
    '3' => t('Hver 3 timer'),
    '6' => t('Hver 6 timer'),
    '12' => t('Hver 12 timer'),
    '24' => t('Hver dag'),
  );
  $import_options[0] = t('Aldrig (Import manuelt)');
  $form['os2web_ofir_job_import_period'] = array(
    '#type' => 'select',
    '#title' => t('Periodisk import'),
    '#description' => t('Vælg, hvor ofte en kilde skal importeres jævne'),
    '#options' => $import_options,
    '#default_value' => variable_get('os2web_ofir_job_import_period', 3),
  );
  // Settings for fields mapping.
  $form['os2web_ofir_job_mapping'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Fields mapping'),
    '#collapsible'   => TRUE,
  );
  $xml_fields = _os2web_ofir_job_get_xml_fields();
  $ofir_job_fields_select = os2web_ofir_job_get_os2web_ofir_job_fields();
  $form['os2web_ofir_job_mapping']['os2web_ofir_job_period_field'] = array(
      '#type'          => 'select',
      '#title'         => t("Application period field"),
      '#description'   => t('The name of field which contain aplication period'),
      '#options'       => $ofir_job_fields_select,
      '#default_value' => variable_get('os2web_ofir_job_period_field'),
    );
   $form['os2web_ofir_job_mapping']['os2web_ofir_job_description_field'] = array(
      '#type'          => 'select',
      '#title'         => t("Job description field"),
      '#description'   => t('The name of field which contain description of the job.'),
      '#options'       => $ofir_job_fields_select,
      '#default_value' => variable_get('os2web_ofir_job_description_field'),
    );
  foreach ($ofir_job_fields_select as $field_name => $label) {
    if ($field_name == variable_get('os2web_ofir_job_period_field')) {
      $form['os2web_ofir_job_mapping']['os2web_ofir_job_mapping_' . $field_name . '_start_date'] = array(
      '#type'          => 'select',
      '#title'         => t($label . ' start date'),
      '#options'       => $xml_fields,
      '#default_value' => variable_get('os2web_ofir_job_mapping_'.$field_name . '_start_date'),
    );

      $form['os2web_ofir_job_mapping']['os2web_ofir_job_mapping_' . $field_name . '_end_date'] = array(
      '#type'          => 'select',
      '#title'         => t($label . ' end date'),
      '#options'       => $xml_fields,
      '#default_value' => variable_get('os2web_ofir_job_mapping_'.$field_name . '_end_date'),
    );
      continue;
    }
    $form['os2web_ofir_job_mapping']['os2web_ofir_job_mapping_' . $field_name] = array(
      '#type'          => 'select',
      '#title'         => t($label),
      '#options'       => $xml_fields,
      '#default_value' => variable_get('os2web_ofir_job_mapping_'.$field_name),
    );
    if ($field_name == variable_get('os2web_ofir_job_description_field'))
      $form['os2web_ofir_job_mapping']['os2web_ofir_job_mapping_' . $field_name . '_summary'] = array(
      '#type'          => 'select',
      '#title'         => t($label . ' summary'),
      '#options'       => $xml_fields,
      '#default_value' => variable_get('os2web_ofir_job_mapping_'.$field_name . '_summary'),
    );
  }
  $form['os2web_ofir_job_import_run_now'] = array(
    '#type'   => 'submit',
    '#value'  => t('Import now'),
    '#submit' => array('os2web_ofir_job_run_import'),
  );
  return system_settings_form($form);
}

function os2web_ofir_job_run_import() {
  _os2web_ofir_job_cronbatch();
  drupal_set_message('Import finished');
}

/*
 * Helper function to parsing XML structure.
 */
function _os2web_ofir_job_get_xml_fields() {
  $wsdl = variable_get('os2web_ofir_job_webservice', 'https://syddjurs.emply.net/api.asmx?WSDL');
  $api_key = variable_get('os2web_ofir_job_apiKey', '4dccbf6d-5e82-4303-89bd-0322ce8f2c30');
  $media_id = variable_get('os2web_ofir_job_mediaId', '537a7324-00fa-42c1-822d-d0256092ddb9');
  $jobs = _os2web_ofir_job_GetProjects($wsdl, $api_key, $media_id);

  // We must check if the webservice throws ANY errors.
  $any_webservice_errors = FALSE;
  $xml_fields =  array('none' => t('NONE'));
  // For each of the inexistent jobs we import them.
  foreach ($jobs as $job) {
    if ($job == 'error_code' || $job == 'error_string') {
      $any_webservice_errors = TRUE;
      continue;
    }
    _os2web_ofir_job_get_xml_fields_structure($job, $xml_fields);

    break;
}
return $xml_fields;
}

/*
 * Helper function to return structure of XML (tags names, attributies etc.)
 */
function _os2web_ofir_job_get_xml_fields_structure($xml, &$xml_fields, $parent_name = "") {
  $name = $xml->getName();
  if ($name == 'facts') {
    foreach($xml->fact as $fact){
    $title_attr = _os2web_ofir_job_xml_attribute($fact, 'title');
    $xml_fields['fact-title-' . $title_attr] = 'fact_' . $title_attr;
    }
   return;
  }
  $attr = (array) $xml->attributes();
    if(isset($attr['@attributes']) && is_array($attr['@attributes'])) {
      foreach ($attr['@attributes'] as $key => $value) {
        $xml_fields[$name . '-attr-' . $key] = $name . '_'.$key;
      }
    }
    if(!empty((array)$xml->children())) {
      foreach($xml->children() as $child) {
        _os2web_ofir_job_get_xml_fields_structure($child, $xml_fields, $name);
      }
    }
    else {
      $xml_fields[$parent_name . '-tag-' . $xml->getName()] = $parent_name . '_' . $name;
}
}

/**
 * Implements hook_cron().
 */
function os2web_ofir_job_cron() {
  $cron_settings_time = variable_get('os2web_ofir_job_import_period', 3);
  $last_run = variable_get('os2web_ofir_job_last_import', strtotime('1970-01-01 00:00:00'));

  // Then we can find out if it is time for our cron-job to run.
  if ($cron_settings_time) {
    $this_run = time();
    // Is it time for import ofir jobs.
    if ($this_run > ($last_run + 60 * 60 * $cron_settings_time)) {
      // Run the cronbatch.
      _os2web_ofir_job_cronbatch();
    }
  }

  // Check for expired job postings.
  os2web_ofir_job_unpublish_expired();
}

/**
 * Function _os2web_ofir_job_cronbatch().
 */
function _os2web_ofir_job_cronbatch() {
  // First we determine the time for our last check for new updates.
  $this_run = time();
  $last_run = variable_get('os2web_ofir_job_last_import', time());
  $updated_after = date('Y-m-d\TH\:i\:s', $last_run);

  // Get jobs.
  $jobs = array();
  $wsdl = variable_get('os2web_ofir_job_webservice', 'https://syddjurs.emply.net/api.asmx?WSDL');
  $api_key = variable_get('os2web_ofir_job_apiKey', '4dccbf6d-5e82-4303-89bd-0322ce8f2c30');
  $media_id = variable_get('os2web_ofir_job_mediaId', '537a7324-00fa-42c1-822d-d0256092ddb9');
  $jobs = _os2web_ofir_job_GetProjects($wsdl, $api_key, $media_id);

  // We must check if the webservice throws ANY errors.
  $any_webservice_errors = FALSE;

  $count = 0;
  // For each of the inexistent jobs we import them.
  foreach ($jobs as $job) {
    if ($job == 'error_code' || $job == 'error_string') {
      $any_webservice_errors = TRUE;
      continue;
    }
    /*if (_os2web_ofir_job_check_existed($job)) {
      continue;
    }*/
    $job_text = _os2web_ofir_job_parse_job_text($job);
    os2web_ofir_job_import_job($job_text);
    $count++;
  }

  // Now we must update the "last_updated" variable.
  // But only if no errors were encountered.
  if (!$any_webservice_errors) {
    variable_set('os2web_ofir_job_last_import', $this_run);
    $updated_at = date('Y-m-d\TH\:i\:s', $this_run);
    $msg = '%count Ofir jobs imported succesfully at: %success';
    watchdog('OS2web Ofir job', $msg, $variables = array('%count' => $count, '%success' => $updated_at));
  }
  else {
    $should_have_been = date('Y-m-d\TH\:i\:s', $this_run);
    $msg = 'OS2web Ofir job threw errors while import at: %runtime. Not all jobs have been import. Last succesful automated import was at: %success';

    watchdog('OS2web Borger.dk', $msg, $variables = array(
      '%runtime' => $should_have_been,
      '%success' => $updated_after)
    );
  }
}
/**
 * Create ofir job node.
 */
function os2web_ofir_job_import_job($job_text) {

  if (!empty($job_text)) {
    $entity_id = "";

    if ($job_text['os2web_ofir_job_mapping_field_os2web_ofir_job_ad_id']){
       $entity_id = db_query('SELECT entity_id FROM {field_data_field_os2web_ofir_job_ad_id} WHERE field_os2web_ofir_job_ad_id_value = :ad_id', array(
              ':ad_id' => $job_text['os2web_ofir_job_mapping_field_os2web_ofir_job_ad_id']))->fetchField();
    }
    if (!empty($entity_id)){
      $node =  node_load($entity_id);
    }
    else {
      $node = new stdClass();
      $node->validated = TRUE;
      $node->uid = 1;
      $node->language = 'da';
    // Insert default value of a new node.
      $node->type = 'os2web_ofir_job';
    }
      $node_fields = os2web_ofir_job_get_os2web_ofir_job_fields();
    foreach($node_fields as $field_name => $label) {
      switch ($field_name) {
        case 'title' :
          $node->title = (!empty($job_text['os2web_ofir_job_mapping_title'])) ? $job_text['os2web_ofir_job_mapping_title'] : '';
          break;
        case 'created' :
          $node->created = !empty($job_text['os2web_ofir_job_mapping_created']) ? strtotime($job_text['os2web_ofir_job_mapping_created']) : REQUEST_TIME;
          break;
        case 'os2web_ofir_job_mapping_field_os2web_ofir_job_text_summary':
          break;
        default:
          $field_info = field_info_field($field_name);
          switch ($field_info['type']) {
            case 'text_long':
              $node->{$field_name}['und'][0]['value'] = html_entity_decode($job_text['os2web_ofir_job_mapping_' . $field_name]);
              $node->{$field_name}['und'][0]['safe_value'] = html_entity_decode($job_text['os2web_ofir_job_mapping_' . $field_name]);
              $node->{$field_name}['und'][0]['format'] = 'full_html';
              if ($field_name == variable_get('os2web_ofir_job_description_field') &&!empty($job_text['os2web_ofir_job_mapping_' . $field_name . '_summary'])) {
                $node->{$field_name}['und'][0]['summary'] = html_entity_decode($job_text['os2web_ofir_job_mapping_' . $field_name . '_summary']);
              }
              break;
            case 'datetime':
              if ($field_name == variable_get('os2web_ofir_job_period_field')) {
                $deadline = '';//(!empty($job_text['os2web_ofir_job_mapping_' . $field_name . '_end_date'])) ? $job_text['os2web_ofir_job_mapping_' . $field_name . '_end_date'] : '';
                $deadline = date('Y-m-d H:i:s', strtotime($deadline));
                $node->{$field_name}['und'][0]['value'] = date('Y-m-d H:i:s', strtotime($job_text['os2web_ofir_job_mapping_' . $field_name . '_start_date']));
                $node->{$field_name}['und'][0]['value2'] = $deadline;
              }
              break;
            case 'text':
              if ($field_name == 'field_os2web_ofir_apply_link') {
                $job_text['os2web_ofir_job_mapping_' . $field_name] = str_replace('vacancyAd', 'vacancyapply', $job_text['os2web_ofir_job_mapping_' . $field_name]);
              }
              $node->{$field_name}['und'][0]['value'] = $job_text['os2web_ofir_job_mapping_' . $field_name];
              $node->{$field_name}['und'][0]['safe_value'] = $job_text['os2web_ofir_job_mapping_' . $field_name];
              break;
            case 'taxonomy_term_reference':
              $voc =  $field_info['settings']['allowed_values'][0]['vocabulary'];
               if (!empty($job_text['os2web_ofir_job_mapping_' . $field_name])) {
                 $tid = _os2web_ofir_job_insert_term($job_text['os2web_ofir_job_mapping_' . $field_name], $voc);
                 if ($tid) {
                  $node->{$field_name}['und'][0]['tid'] = $tid;
                }
              }

              break;

          }
      }

    }

   node_save($node);
  }
}

function _os2web_ofir_job_insert_term($design, $vocab_name) {

  // Check if design already exists in vocabulary
  $term_array = taxonomy_get_term_by_name($design, $vocab_name);
  if (count($term_array) > 0) {
    $term = reset($term_array);
    return $term->tid;
  }

  // Term doesn't already exist. Check if vocabulary exists
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);

  if (!$vocab) {
    watchdog('os2web_ofir_job', 'Vocabulary ofir_job_designs doesn\'t exist. Can\'t create ' .
      $design . 'in ' . $vocab_name . '!', WATCHDOG_WARNING);
    return FALSE;
  }

  // Insert new term
  $term = (object) array(
    'name' => $design,
    'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  return $term->tid;
}

/**
 * SOAP function GetProjects.
 */
function _os2web_ofir_job_GetProjects($wsdl, $api_key, $media_id) {
  if (empty($wsdl) || empty($api_key) || empty($media_id)) {
    return array();
  }
  $errors = array();
  // Then we can start using a new soap-client to get jobs.
  $client = new SoapClient($wsdl, array('exceptions' => 0));
  $result_list = $client->GetProjects(array('mediaId' => $media_id, 'apiKey' => $api_key));
  if (is_soap_fault($result_list)) {
    $errors = array(
      'error_code' => $result_list->faultcode,
      'error_string' => $result_list->faultstring,
    );
    return $errors;
  }

  $jobs = array();
  // Then we get the result-list from the specified webservice.
  $job_list = $result_list->GetProjectsResult;
  if (is_soap_fault($job_list)) {
    $errors = array(
      'error_code' => $job_list->faultcode,
      'error_string' => $job_list->faultstring,
    );
    return $errors;
  }
  else {

    // Now we step through all the fetched job and convert them to arrays
    // of wanted field-sets.
    $any = isset($job_list->any) ? $job_list->any : '';
    if (!empty($any)) {
      $doc = new DOMDocument('1.0', 'UTF-8');
      $doc->strictErrorChecking = FALSE;
      @$doc->loadHTML('<?xml encoding="UTF-8">' . $any);
      $xml = simplexml_import_dom($doc);

      $projects = $xml->body->root->project;
      foreach ($projects as $id => $job) {
        $jobs[] = $job;
      }
    }
  }
  return $jobs;
}

/**
 * Function _os2web_ofir_job_parse_job_text().
 */
function _os2web_ofir_job_parse_job_text($xml) {
  // This function can parse a ofir job XML-feed and extract
  // all the field values we want for our Drupal-nodes.

//b
  $facts = array();
  foreach($xml->ad->facts->fact as $fact){
    $title_attr = _os2web_ofir_job_xml_attribute($fact, 'title');
    $facts[$title_attr] = (string) $fact;
  }
  //add specified fields for description and period
  $os2web_ofir_job_node_fields = os2web_ofir_job_get_os2web_ofir_job_fields();
  if ($period_field =  variable_get('os2web_ofir_job_period_field')) {
    $os2web_ofir_job_node_fields[$period_field .'_start_date'] = $period_field . '_start_date';
    $os2web_ofir_job_node_fields[$period_field . '_end_date'] = $period_field . '_end_date';
  }
  if($description_field = variable_get('os2web_ofir_job_description_field')) {
    $os2web_ofir_job_node_fields[$description_field . '_summary'] = $description_field . '_summary';
  }
  //retrive data from XML
  foreach ($os2web_ofir_job_node_fields as $field_name => $label){
    if ($mapped_field = variable_get('os2web_ofir_job_mapping_' . $field_name)) {
      $tag_parts = explode('-', $mapped_field);
      switch ($tag_parts[1]) {
        case 'tag':
         $ofir_job['os2web_ofir_job_mapping_' . $field_name] = ($tag_parts[0] == 'project') ?(string) $xm->$tag_parts[2] : (string) $xml->$tag_parts[0]->$tag_parts[2];
         break;
        case 'attr':
          $ofir_job['os2web_ofir_job_mapping_' . $field_name] =  ($tag_parts[0] == 'project') ? _os2web_ofir_job_xml_attribute($xml, $tag_parts[2]) : _os2web_ofir_job_xml_attribute($xml->$tag_parts[0], $tag_parts[2]);
         break;
         case 'title':
           $ofir_job['os2web_ofir_job_mapping_' . $field_name] = $facts[$tag_parts[2]];
           break;
      }
    }
  }
  return $ofir_job;
}
/**
 * Check job is existed.
 *
 * @param Object $job
 *   SimpleXMLElement Object
 */
function _os2web_ofir_job_check_existed($job) {
  if (!is_object($job)) {
    return FALSE;
  }
  $ad_id = _os2web_ofir_job_xml_attribute($job->ad, 'id');
  if ($ad_id) {
    $status = db_query('SELECT entity_id FROM {field_data_field_os2web_ofir_job_ad_id} WHERE field_os2web_ofir_job_ad_id_value = :ad_id', array(
              ':ad_id' => $ad_id))->fetchField();
    if (empty($status)) {
      return FALSE;
    }
    else {
      $node =  node_load($status);
      if ((int)$node->created < strtotime(_os2web_ofir_job_xml_attribute($job, 'published'))) {
        return FALSE;
      }
      else {
        return TRUE;
      }
    }
  }
  return FALSE;
}
/**
 * Get xml attribute.
 */
function _os2web_ofir_job_xml_attribute($object, $attribute) {
  if (isset($object[$attribute])) {
    return (string) $object[$attribute];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os2web_ofir_job_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  $form['field_os2web_ofir_category_tid']['#options']['All'] = t('Alle stillingskategorier');
}

/**
 * Unpublishes job postings, where application date is expired.
 */
function os2web_ofir_job_unpublish_expired() {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'os2web_ofir_job')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_os2web_ofir_job_period', 'value2', date('c', 0), '!=')
    ->fieldCondition('field_os2web_ofir_job_period', 'value2', date('c'), '<');
  $result = $query->execute();

  // If results were found, unpublish nodes
  if (isset($result['node'])) {

    $nodes = node_load_multiple(array_keys($result['node']));

    foreach ($nodes as $node) {
      $node->status = 0;
      node_save($node);
    }
  }
}
/*
 * Helper function to get node fields list
 */
function os2web_ofir_job_get_os2web_ofir_job_fields() {
  $ofir_job_fields = field_info_instances('node', 'os2web_ofir_job');
    $ofir_job_fields_arr = array('title' => t('Title'), 'created' => t('Created'));
    foreach ($ofir_job_fields as $field_name => $value) {
      $ofir_job_fields_arr[$field_name] = $value['label'];
    }
   return  $ofir_job_fields_arr;
}

function os2web_ofir_job_views_pre_render(&$view) {
  if (($view->name == 'os2web_ofir_job_header_image' && $view->current_display == 'block_2') ||
      ($view->name == 'emply_job_secondary' && $view->current_display == 'block')) {

    if ($view->field['field_os2web_ofir_job_period']->view->result[0]
        ->_field_data['nid']['entity']->field_os2web_ofir_job_period['und'][0]['value2'] == date('Y-m-d H:i:s', 0)) {
       $view->field['field_os2web_ofir_job_period']->options['exclude'] = TRUE;
        }
  }
}